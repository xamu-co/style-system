/** @format */
// There are some components that share common styles

// avatar & avatarAureo shared styles
//
// @group SharedStyles
[class*="x-avatar"] {
	display: block;
	overflow: hidden;
	flex: 0 0 auto;
	border-radius: var(--br, 1rem);
	transition: all 0.1s ease-out;
	&:not([class*="__bgC"]) {
		// Color
		background-color: color(light);
	}

	// avatar size
	//
	// @group Modifiers
	&.m__size {
		&-lg {
			--br: 1.667rem;
			&.m__bdr,
			&.m__border {
				--bw: 4px;
			}
		}
		&-md {
			--br: 1.333rem;
			&.m__bdr,
			&.m__border {
				--bw: 3px;
			}
		}
	}

	// avatar border
	//
	// @group Modifiers
	&.m__bdr,
	&.m__border {
		border-style: solid;
		box-sizing: border-box;
		border-width: var(--bw, 2px);
		&:not([class*="__bdrC"]) {
			// Color
			border-color: color(light);
		}
	}

	img {
		object-fit: cover;
		object-position: 50% 50%;
	}
}
a[class*="x-avatar"] {
	&:hover,
	&.is__active,
	&.is__routeExact {
		// box-shadow: 1px 1px 3px color(dark, 0.2);
		img {
			opacity: 0.7;
		}
	}
	// avatar border
	//
	// @group Modifiers
	&.m__bdr,
	&.m__border {
		&:not(:hover),
		&:not(.is__active),
		&:not(.is__routeExact) {
			border-color: transparent;
		}
	}
}

// icon & svgIcon
//
// @group SharedStyles
.x-svg,
i.x-icon {
	// --sz could be inherited, we don't want that
	width: auto;
	height: var(--isz, 1rem);
	font-size: var(--isz, 1rem);

	// icon margin
	//
	// @group Modifiers
	&.m__m,
	&.m__margin {
		&:not(:first-child) {
			margin-left: 0.4em;
		}
		&:not(:last-child) {
			margin-right: 0.4em;
		}
	}

	// icon size
	//
	// @group Modifiers
	@for $i from 2 through 10 {
		&.m__size-#{$i*5} {
			--isz: #{$i/3}rem;
		}
	}
}

// button defaults & round modifier
//
// @group SharedStyles
[class*="x-btn"]:not(.x-btnY):not(.x-btnLink) {
	// this is the default value
	// Size
	padding: var(--bp, 0 0.8rem);

	// round button
	//
	// @group Modifiers
	&.m__round {
		@include extend-viewports-classes(true, $viewports) {
			--bp: 0; // button padding
			width: var(--sz, 2.4rem);
			i.x-icon,
			.x-svg {
				margin: 0 !important;
				+ span {
					display: none;
				}
			}
		}
	}
}

// content alignment
//
// @group SharedStyles
[class*="x-btn"] {
	flex: 0 0 auto;
	text-align: center;
	@include flexbox(row, nowrap, center, center, inline-flex);
}

// icon behavior
//
// @group SharedStyles
[class*="x-btn"]:not(.x-btnY):not(.x-btnLink),
.x-link {
	> * + * {
		margin-left: 0.4em;
	}
}

// is alert
//
// @group SharedStyles
.x-link,
.x-btnToggle {
	&.is__alert:after {
		content: "";
		display: block;
		width: 1rem;
		height: 1rem;
		position: absolute;
		right: -0.4rem;
		bottom: -0.4rem;
		border-width: 4px;
		border-style: solid;
		border-radius: 50%;
		box-sizing: border-box;
		border-color: var(--bc, transparent);
	}
}

// buttons & select themes
// Invalid state does not make sense on selects
//
// @group SharedStyles
[class*="x-btn"]:not(.x-btnToggle),
select.x-inSelect {
	// first value is the bgColor
	// second value is the textColor
	//
	// @group Unions
	&.u__tm-light {
		&-secondary {
			--cl: #{color(secondary)};
			&:not(.is__route):not(.is__active) {
				&:hover,
				&:focus {
					--cl: #{color(secondary, 0.7)};
					--bc: #{color(secondary, 0.3)};
				}
			}
		}
		&-dark {
			--cl: #{color(dark, 0.7)};
			&:not(.is__route):not(.is__active) {
				&:hover,
				&:focus {
					--cl: #{color(dark, 0.3)};
					--bc: var(--cl);
				}
			}
		}
		&-primaryAlt {
			--cl: #{color(primaryAlt)};
			&:not(.is__route):not(.is__active) {
				&:hover,
				&:focus {
					--cl: #{color(primaryAlt, 0.7)};
					--bc: #{color(primaryAlt, 0.3)};
				}
			}
		}
		&-danger {
			--cl: #{color(danger)};
			&:not(.is__route):not(.is__active) {
				&:hover,
				&:focus {
					--cl: #{color(danger, 0.7)};
					--bc: #{color(danger, 0.3)};
				}
			}
		}
		&-primary {
			--cl: #{color(primary)};
			--bg: #{color(light)};
			&:not(.is__route):not(.is__active) {
				&:hover,
				&:focus {
					--cl: #{color(primary, 0.7)};
					--bc: #{color(primary, 0.3)};
				}
			}
			&:not(.is__active):not(.is__route) {
				text-shadow: 0 0 1px color(dark, 0.2);
			}
		}
		&-secondary,
		&-dark,
		&-primaryAlt,
		&-danger {
			--bg: #{color(light)};
			&.is__active,
			&.is__route:not(.is__routeExact) {
				&:hover,
				&:focus {
					--cl: #{color(light, 0.7)};
				}
			}
			&:disabled,
			&[disabled] {
				--cl: #{color(light, 0.3)};
			}
		}
	}
	&.u__tm-primary-light {
		--cl: #{color(light)};
		--bg: #{color(primary)};
		&:not(.is__route):not(.is__active) {
			&:hover,
			&:focus {
				--cl: #{color(light, 0.7)};
				--bc: #{color(light, 0.3)};
			}
		}
		&.is__active,
		&.is__route:not(.is__routeExact) {
			&:hover,
			&:focus {
				--cl: #{color(primary, 0.7)};
			}
		}
		&:disabled,
		&[disabled] {
			--cl: #{color(primary, 0.3)};
		}
	}
	&.u__tm-primaryAlt-primary {
		--cl: #{color(primary)};
		--bg: #{color(primaryAlt)};
		&:not(.is__route):not(.is__active) {
			&:hover,
			&:focus {
				--cl: #{color(primary, 0.7)};
				--bc: #{color(primary, 0.3)};
			}
		}
		&.is__active,
		&.is__route:not(.is__routeExact) {
			&:hover,
			&:focus {
				--cl: #{color(primaryAlt, 0.7)};
			}
		}
		&:disabled,
		&[disabled] {
			--cl: #{color(primaryAlt, 0.3)};
		}
	}
	&.u__tm-danger-light {
		--cl: #{color(light)};
		--bg: #{color(danger)};
		&:not(.is__route):not(.is__active) {
			&:hover,
			&:focus {
				--cl: #{color(light, 0.7)};
				--bc: #{color(light, 0.3)};
			}
		}
		&.is__active,
		&.is__route:not(.is__routeExact) {
			&:hover,
			&:focus {
				--cl: #{color(danger, 0.7)};
			}
		}
		&:disabled,
		&[disabled] {
			--cl: #{color(danger, 0.3)};
		}
	}
	// default theme
	&:not([class*="__tm"]),
	&.u__tm-secondary-light {
		--cl: #{color(light)};
		--bg: #{color(secondary)};
		&:not(.is__route):not(.is__active) {
			&:hover,
			&:focus {
				--cl: #{color(light, 0.7)};
				--bc: #{color(light, 0.3)};
			}
		}
		&.is__active,
		&.is__route:not(.is__routeExact) {
			&:hover,
			&:focus {
				--cl: #{color(secondary, 0.7)};
			}
		}
		&.is__route {
			--cl: #{color(secondary)};
		}
		&.is__routeExact {
			--cl: #{color(dark, 0.7)};
		}
		&:disabled,
		&[disabled] {
			--cl: #{color(secondary, 0.3)};
		}
	}

	// OVERRIDE: dejar en el final
	&.is__active,
	&.is__route,
	&.is__routeExact {
		--cl: var(--bg);
		--bc: var(--cl);
	}
	&.is__active,
	&.is__route:not(.is__routeExact) {
		&:hover,
		&:focus {
			--bc: var(--cl);
		}
	}
	&:disabled,
	&[disabled] {
		--bc: var(--cl);
	}
	&.is__routeExact,
	&.is__route,
	&.is__active,
	&:disabled,
	&[disabled] {
		background-color: var(--bg-a, transparent);
	}
}

// default size
//
// @group SharedStyles
[class*="x-btn"]:not(.x-btnY):not(.x-btnLink),
.x-inTxt,
select.x-inSelect {
	// Size
	// this is the default value
	height: var(--sz, 2.4rem);
	border-radius: var(--br, 1rem);
	border-width: var(--bw, 2px);
}

// capitalize
//
// @group SharedStyles
[class*="x-btn"]:not(.x-btnY),
.x-link,
select.x-inSelect {
	&,
	> :not(.x-icon) {
		&::first-letter {
			text-transform: capitalize;
		}
	}
}

// disabled behavior
//
// @group SharedStyles
[class*="x-btn"]:not(.x-btnY),
.x-inTxt,
.x-link,
select.x-inSelect {
	&:disabled,
	&[disabled] {
		opacity: 0.3;
		pointer-events: none;
	}
}

// basic styling
//
// @group SharedStyles
[class*="x-btn"],
.x-inTxt,
.x-link,
select.x-inSelect {
	white-space: var(--wrap, nowrap);
	text-align: var(--txt-align, center);
	color: var(--cl, transparent);
	background: var(--bg, transparent);
	border-color: var(--bc, transparent); // by default
	border-style: solid;
	text-shadow: none;
	box-sizing: border-box;
	&:not([class*="__txtSi"]) {
		// Size
		font-size: 1em;
	}
}

// LOOPS
@each $name, $size in $fontSizes {
	// button & buttonToggle shared styles
	//
	// @group SharedStyles
	[class*="x-btn"]:not(.x-btnY):not(.x-btnLink) {
		&.m__size-#{$name} {
			// --p could be inherited, we don't want that
			--bp: 0 #{$size * 0.8}; // button padding
		}
	}

	// text, select, button & buttonToggle shared styles
	//
	// @group SharedStyles
	[class*="x-btn"]:not(.x-btnY):not(.x-btnLink),
	.x-inTxt,
	select.x-inSelect {
		&.m__size-#{$name} {
			--sz: #{$size * 2.6}; // button size: height/width
			--br: #{$size}; // button border radius
			--bw: calc(2px + #{$size/18}); // button border width
		}
	}
}

// tag associated
@import "icon";
@import "inputText";
@import "inputCheckbox";
@import "inputRadio";
@import "inputSelect";
@import "navList";

// non tag associated
@import "text";
@import "emoji";
@import "svgIcon";
@import "avatar";
@import "avatarAureo";
@import "back";
@import "box";
@import "link";
@import "button";
@import "buttonLink";
@import "buttonToggle";
@import "holder";
@import "scroll";
@import "view";
@import "navigationX";
@import "navigationY";
