/** @format */

/// inicia GLOBAL MODIFIERS
/// Can be used in any element

/// hidden element, hide visually only
///
/// @group GlobalModifiers

.xm__hidden {
	@include extend-viewports(true) {
		width: 0.1px;
		height: 0.1px;
		opacity: 0;
		overflow: hidden;
		position: absolute;
		z-index: -1;
	}
}

/// flex growth and shrink
///
/// @group GlobalModifiers
.xm__flx {
	@include extend-viewports {
		@include flex(1 1 auto);
	}
}

/// positon
///
/// @group GlobalModifiers
.xm__position {
	&-fixed {
		@include extend-viewports {
			position: fixed;
		}
	}
	&-sticky {
		@include extend-viewports {
			position: sticky;
		}
	}
	&-relative {
		@include extend-viewports {
			position: relative;
		}
	}
	&-absolute {
		@include extend-viewports {
			position: absolute;
		}
	}
	/// default
	&,
	&-static {
		@include extend-viewports {
			position: static;
		}
	}
}

/// text wrap
///
/// @group GlobalModifiers
.xm__txtWrap {
	&-nowrap {
		@include extend-viewports {
			white-space: nowrap;
		}
	}
	/// default
	&,
	&-wrap {
		@include extend-viewports {
			white-space: normal;
		}
	}
}

/// box margins
/// X axis
///
/// @group GlobalModifiers
.xm__mX {
	&-left {
		@include extend-viewports {
			margin-left: 0;
			margin-right: auto;
		}
	}
	&-right {
		@include extend-viewports {
			margin-left: auto;
			margin-right: 0;
		}
	}
	/// default
	&,
	&-center {
		@include extend-viewports {
			margin-left: auto;
			margin-right: auto;
		}
	}
}

/// box margins
/// Y axis
///
/// @group GlobalModifiers
.xm__mY {
	&-top {
		@include extend-viewports {
			margin-top: 0;
			margin-bottom: auto;
		}
	}
	&-bottom {
		@include extend-viewports {
			margin-top: auto;
			margin-bottom: 0;
		}
	}
	/// default
	&,
	&-center {
		@include extend-viewports {
			margin-top: auto;
			margin-bottom: auto;
		}
	}
}

/// box padding
/// X axis
///
/// @group GlobalModifiers
.xm__pX {
	/// there is no thing such as padding auto
	@include extend-viewports {
		padding-left: 1rem;
		padding-right: 1rem;
	}
}

/// box padding
/// Y axis
///
/// @group GlobalModifiers
.xm__pY {
	/// there is no thing such as padding auto
	@include extend-viewports {
		padding-top: 1rem;
		padding-bottom: 1rem;
	}
}

/// flexbox justify content
///
/// @group GlobalModifiers
.xm__flxJustify {
	&-end {
		@include extend-viewports {
			justify-content: flex-end;
		}
	}
	&-start {
		@include extend-viewports {
			justify-content: flex-start;
		}
	}
	&-around {
		@include extend-viewports {
			justify-content: space-around;
		}
	}
	&-between {
		@include extend-viewports {
			justify-content: space-between;
		}
	}
	/// default
	&,
	&-center {
		@include extend-viewports {
			justify-content: center;
		}
	}
}

/// flexbox align items
///
/// @group GlobalModifiers
.xm__flxAlign {
	&-end {
		@include extend-viewports {
			align-items: flex-end;
		}
	}
	&-start {
		@include extend-viewports {
			align-items: flex-start;
		}
	}
	&-stretch {
		@include extend-viewports {
			align-items: stretch;
		}
	}
	/// default
	&,
	&-center {
		@include extend-viewports {
			align-items: center;
		}
	}
}

/// font weight
///
/// @group GlobalModifiers
.xm__txtWeight {
	&-bold {
		@include extend-viewports {
			font-weight: $fontWeightBold;
		}
	}
	&-regular {
		@include extend-viewports {
			font-weight: $fontWeightRegular;
		}
	}
}

/// text align
///
/// @group FamilyGlobalModifiers
.xm__txtAlign,
.xm__txtAlignFlx {
	&-right {
		@include extend-viewports {
			text-align: right;
			> :not([class*="xm__txtAlign"]):not([class*="x-"]) {
				text-align: right;
			}
		}
	}
	&-center {
		@include extend-viewports {
			text-align: center;
			> :not([class*="xm__txtAlign"]):not([class*="x-"]) {
				text-align: center;
			}
		}
	}
	&-justify {
		@include extend-viewports {
			text-align: justify;
			> :not([class*="xm__txtAlign"]):not([class*="x-"]) {
				text-align: justify;
			}
		}
	}
	/// default
	&,
	&-left {
		@include extend-viewports {
			text-align: left;
			> :not([class*="xm__txtAlign"]):not([class*="x-"]) {
				text-align: left;
			}
		}
	}
}

/// text align flex
///
/// @group FamilyGlobalModifiers
.xm__txtAlignFlx {
	&-right {
		@include extend-viewports {
			@include flexbox(column, nowrap, flex-start, flex-end, inline-flex);
			> :not([class*="xm__txtAlign"]):not([class*="x-"]) {
				@include flexbox(
					column,
					nowrap,
					flex-start,
					flex-end,
					inline-flex
				);
			}
		}
	}
	&-center {
		@include extend-viewports {
			@include flexbox(column, nowrap, flex-start, center, inline-flex);
			> :not([class*="xm__txtAlign"]):not([class*="x-"]) {
				@include flexbox(
					column,
					nowrap,
					flex-start,
					center,
					inline-flex
				);
			}
		}
	}
	&-justify {
		@include extend-viewports {
			@include flexbox(column, nowrap, flex-start, stretch, inline-flex);
			> :not([class*="xm__txtAlign"]):not([class*="x-"]) {
				@include flexbox(
					column,
					nowrap,
					flex-start,
					stretch,
					inline-flex
				);
			}
		}
	}
	/// default
	&,
	&-left {
		@include extend-viewports {
			@include flexbox(
				column,
				nowrap,
				flex-start,
				flex-start,
				inline-flex
			);
			> :not([class*="xm__txtAlign"]):not([class*="x-"]) {
				@include flexbox(
					column,
					nowrap,
					flex-start,
					flex-start,
					inline-flex
				);
			}
		}
	}
}

/// LOOPS

/// text size
///
/// @group GlobalModifiers
@each $name, $size in $fontSizes {
	.xm__txtSize-#{$name} {
		@include extend-viewports {
			font-size: #{$size};
		}
	}
}
/// default
.xm__txtSize,
.xm__txtSize-normal {
	@include extend-viewports {
		font-size: $fontSize;
	}
}

/// box model: margin & padding
///
/// @group GlobalModifiers
$models: margin, padding;
@each $model in $models {
	@for $i from 1 through 10 {
		/// all sides
		.xm__#{str-slice($model,1,1) + "-" + $i*5} {
			@include extend-viewports {
				#{$model}: #{$i/3}rem;
			}
		}
		/// X axis
		.xm__#{str-slice($model,1,1) + "X-" + $i*5} {
			@include extend-viewports {
				#{$model}-left: #{$i/3}rem;
				#{$model}-right: #{$i/3}rem;
			}
		}
		/// Y axis
		.xm__#{str-slice($model,1,1) + "Y-" + $i*5} {
			@include extend-viewports {
				#{$model}-top: #{$i/3}rem;
				#{$model}-bottom: #{$i/3}rem;
			}
		}
	}
	/// default: all sides
	.xm__#{$model},
	.xm__#{str-slice($model,1,1)} {
		@include extend-viewports {
			#{$model}: 1rem;
		}
	}
	/// margin & padding already have defaults for X & Y axles
}

/// Dimensions
$dimensions: width, height;
@each $dimension in $dimensions {
	/// width, height
	///
	/// @group GlobalModifiers
	.xm__#{$dimension} {
		&-quarter {
			@include extend-viewports {
				#{$dimension}: 50%;
			}
		}
		&-third {
			@include extend-viewports {
				#{$dimension}: 33%;
			}
		}
		&-half {
			@include extend-viewports {
				#{$dimension}: 50%;
			}
		}
		&,
		&-full {
			@include extend-viewports {
				#{$dimension}: 100%;
			}
		}
	}

	/// max width, max height
	/// pixel based
	///
	/// @group GlobalModifiers
	$maxSizes: 1400, 1300, 1080, 980, 880, 780, 580, 480, 440, 180;
	@each $size in $maxSizes {
		.xm__max#{capitalize($dimension) + "-" + $size} {
			@include extend-viewports {
				max-#{$dimension}: #{$size}px;
			}
		}
		.xm__min#{capitalize($dimension) + "-" + $size} {
			@include extend-viewports {
				min-#{$dimension}: #{$size}px;
			}
		}
	}
	/// default
	.xm__max#{capitalize($dimension)},
	.xm__max#{capitalize($dimension)}-1200 {
		@include extend-viewports {
			max-#{$dimension}: 1200px;
		}
	}

	/// min width, max width
	/// viewport width based
	///
	/// @group GlobalModifiers
	@for $i from 3 through 10 {
		.xm__min#{capitalize($dimension) + "Vw-" + $i*5} {
			@include extend-viewports {
				min-#{$dimension}: #{$i * 5}vw;
			}
		}
		.xm__min#{capitalize($dimension) + "Vh-" + $i*10} {
			@include extend-viewports {
				min-#{$dimension}: #{$i * 10}vh;
			}
		}
	}
	/// defaults
	.xm__min#{capitalize($dimension)}Vw {
		@include extend-viewports {
			min-#{$dimension}: 15vw;
		}
	}
	.xm__min#{capitalize($dimension)}Vh {
		@include extend-viewports {
			min-#{$dimension}: 30vh;
		}
	}
}

/// margin & padding
///
/// @group GlobalModifiers
$directions: top, right, bottom, left;
@each $direction in $directions {
	@for $i from 1 through 10 {
		/// margins
		.xm__m#{capitalize($direction) + "-" + $i*5} {
			@include extend-viewports {
				margin-#{$direction}: #{$i/3}rem;
			}
		}
		/// paddings
		.xm__p#{capitalize($direction) + "-" + $i*5} {
			@include extend-viewports {
				padding-#{$direction}: #{$i/3}rem;
			}
		}
	}
	/// margin defaults
	.xm__m#{capitalize($direction)} {
		@include extend-viewports {
			margin-#{$direction}: 1rem;
		}
	}
	/// padding defaults
	.xm__p#{capitalize($direction)} {
		@include extend-viewports {
			padding-#{$direction}: 1rem;
		}
	}
}

@for $i from 1 through 10 {
	/// grid Gap
	/// both dimension
	///
	/// @group GlobalModifiers
	.xm__gap-#{$i*5},
	.xm__grdGap-#{$i*5} {
		@include extend-viewports {
			gap: #{$i/3}rem;
		}
	}

	/// item Space for childs
	/// both axis
	///
	/// @group GlobalModifiers
	.xm__itemSpace-#{$i*5} {
		@include extend-viewports {
			> * {
				margin-bottom: #{$i/3}rem;
				margin-right: #{$i/3}rem;
			}
		}
	}
	.xm__itemSpaceX-#{$i*5} {
		/// X axis
		@include extend-viewports {
			> :not([class*="xm__mRight"]):not(:last-child) {
				margin-right: #{$i/3}rem;
			}
		}
	}
	.xm__itemSpaceY-#{$i*5} {
		/// Y axis
		@include extend-viewports {
			> :not([class*="xm__mBottom"]):not(:last-child) {
				margin-bottom: #{$i/3}rem;
			}
		}
	}
}

/// grid/column gap default
.xm__gap,
.xm__grdGap {
	@include extend-viewports {
		gap: 1rem;
	}
}

/// item spacing defaults
.xm__itemSpace {
	@include extend-viewports {
		> * {
			margin-bottom: 1rem;
			margin-right: 1rem;
		}
	}
}
.xm__itemSpaceX {
	/// X dimension
	@include extend-viewports {
		> :not([class*="xm__mRight"]):not(:last-child) {
			margin-right: 1rem;
		}
	}
}
.xm__itemSpaceY {
	/// Y dimension
	@include extend-viewports {
		> :not([class*="xm__mBottom"]):not(:last-child) {
			margin-bottom: 1rem;
		}
	}
}

/// text color & text shadow & background color & borderColor
/// color based modifiers
///
/// @group ColorGlobalModifiers
@each $name, $color in $colors {
	/// striped childs
	.xm__striped-#{$name} {
		@include extend-viewports {
			> :nth-child(odd) {
				background-color: #{color($name, 0.1)};
			}
		}
	}

	/// text color
	.xm__txtColor-#{$name} {
		@include extend-viewports {
			&,
			> :not([class*="xm__txtColor"]):not([class*="x-"]) {
				color: #{color($name)};
			}
		}
	}

	/// text shadow
	.xm__txtShadow-#{$name} {
		@include extend-viewports {
			&,
			> :not([class*="xm__txtShadow"]):not([class*="x-"]) {
				text-shadow: 1px 1px 1px #{color($name)};
			}
		}
	}

	/// background color
	.xm__bgColor-#{$name} {
		@include extend-viewports {
			background: #{color($name)};
		}
	}

	/// borderColor
	.xm__bdrColor-#{$name} {
		@include extend-viewports {
			border-color: #{color($name)};
		}
	}

	/// shades of color
	@for $i from 1 through 9 {
		/// text color
		.xm__txtColor-#{$name}#{$i} {
			@include extend-viewports {
				&,
				> :not([class*="xm__txtColor"]):not([class*="x-"]) {
					color: #{color($name, $i/10)};
				}
			}
		}

		/// text shadow
		.xm__txtShadow-#{$name}#{$i} {
			@include extend-viewports {
				&,
				> :not([class*="xm__txtShadow"]):not([class*="x-"]) {
					text-shadow: 1px 1px 1px #{color($name, $i/10)};
				}
			}
		}

		/// background color
		.xm__bgColor-#{$name}#{$i} {
			@include extend-viewports {
				background: #{color($name, $i/10)};
			}
		}

		/// borderColor
		.xm__bdrColor-#{$name}#{$i} {
			@include extend-viewports {
				border-color: #{color($name, $i/10)};
			}
		}
	}
}

/// default striped child color
.xm__striped {
	@include extend-viewports {
		> :nth-child(odd) {
			background-color: color(secondary, 0.1);
		}
	}
}

/// default color
.xm__txtColor {
	@include extend-viewports {
		&,
		> :not([class*="xm__txtColor"]):not([class*="x-"]) {
			color: color(dark, 0.7);
		}
	}
}

/// default text color
.xm__txtShadow {
	@include extend-viewports {
		&,
		> :not([class*="xm__txtShadow"]):not([class*="x-"]) {
			text-shadow: 1px 1px 1px color(dark, 0.3);
		}
	}
}

/// default background color
.xm__bgColor {
	@include extend-viewports {
		background: color(light);
	}
}

/// default borderColor
.xm__bdrColor {
	@include extend-viewports {
		border-color: color(secondary, 0.1);
	}
}

/// termina GLOBAL MODIFIERS
