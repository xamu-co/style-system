/** @format */

/// inicia GLOBAL MODIFIERS
/// Can be used in any element

/// hidden element, hide visually only
///
/// @group GlobalModifiers

.xm__hidden {
	@include extend-viewports-classes(true) {
		width: 0.1px;
		height: 0.1px;
		opacity: 0;
		overflow: hidden;
		position: absolute;
		z-index: -1;
	}
	&-full {
		@include extend-viewports-classes(true) {
			display: none !important;
		}
	}
}

/// flex growth and shrink
///
/// @group GlobalModifiers
.xm__flx {
	@include extend-viewports-classes {
		flex: 1 1 auto;
	}
}

/// positon
///
/// @group GlobalModifiers
.xm__position {
	&-fixed {
		@include extend-viewports-classes {
			--po: fixed;
		}
	}
	&-sticky {
		@include extend-viewports-classes {
			--po: sticky;
		}
	}
	&-relative {
		@include extend-viewports-classes {
			--po: relative;
		}
	}
	&-absolute {
		@include extend-viewports-classes {
			--po: absolute;
		}
	}
	/// default
	&,
	&-static {
		@include extend-viewports-classes {
			--po: static;
		}
	}
}
[class*="__position"] {
	position: var(--po, relative);
}

/// text wrap
///
/// @group GlobalModifiers
.xm__txtWrap {
	&-nowrap {
		@include extend-viewports-classes {
			white-space: nowrap;
		}
	}
	/// default
	&,
	&-wrap {
		@include extend-viewports-classes {
			white-space: normal;
		}
	}
}

/// box margins
/// X axis
///
/// @group GlobalModifiers
.xm__mX {
	&-left {
		@include extend-viewports-classes {
			margin-left: 0;
			margin-right: auto;
		}
	}
	&-right {
		@include extend-viewports-classes {
			margin-left: auto;
			margin-right: 0;
		}
	}
	/// default
	&,
	&-center {
		@include extend-viewports-classes {
			--mx: auto;
		}
	}
}

/// box margins
/// Y axis
///
/// @group GlobalModifiers
.xm__mY {
	&-top {
		@include extend-viewports-classes {
			margin-top: 0;
			margin-bottom: auto;
		}
	}
	&-bottom {
		@include extend-viewports-classes {
			margin-top: auto;
			margin-bottom: 0;
		}
	}
	/// default
	&,
	&-center {
		@include extend-viewports-classes {
			--my: auto;
		}
	}
}

/// box padding
/// X axis
///
/// @group GlobalModifiers
.xm__pX {
	/// there is no thing such as padding auto
	@include extend-viewports-classes {
		--px: 1rem;
	}
}

/// box padding
/// Y axis
///
/// @group GlobalModifiers
.xm__pY {
	/// there is no thing such as padding auto
	@include extend-viewports-classes {
		--py: 1rem;
	}
}

/// flexbox justify content
///
/// @group GlobalModifiers
.xm__flxJustify {
	&-end {
		@include extend-viewports-classes {
			--fj: flex-end;
		}
	}
	&-start {
		@include extend-viewports-classes {
			--fj: flex-start;
		}
	}
	&-around {
		@include extend-viewports-classes {
			--fj: space-around;
		}
	}
	&-evenly {
		@include extend-viewports-classes {
			--fj: space-evenly;
		}
	}
	&-between {
		@include extend-viewports-classes {
			--fj: space-between;
		}
	}
	/// default
	&,
	&-center {
		@include extend-viewports-classes {
			--fj: center;
		}
	}
}
[class*="__flxJu"] {
	justify-content: var(--fj, initial);
}

/// flexbox align items
///
/// @group GlobalModifiers
.xm__flxAlign {
	&-end {
		@include extend-viewports-classes {
			--fa: flex-end;
		}
	}
	&-start {
		@include extend-viewports-classes {
			--fa: flex-start;
		}
	}
	&-stretch {
		@include extend-viewports-classes {
			--fa: stretch;
		}
	}
	&-baseline {
		@include extend-viewports-classes {
			--fa: baseline;
		}
	}
	/// default
	&,
	&-center {
		@include extend-viewports-classes {
			--fa: center;
		}
	}
}
[class*="__flxA"] {
	align-items: var(--fa, initial);
}

/// font weight
///
/// @group GlobalModifiers
.xm__txtWeight {
	&-bold {
		@include extend-viewports-classes {
			font-weight: $fontWeightBold;
			@supports (-moz-appearance: none) {
				// firefox fix
				font-weight: $fontWeightBoldAlt;
			}
		}
	}
	&-regular {
		@include extend-viewports-classes {
			font-weight: $fontWeightRegular;
			@supports (-moz-appearance: none) {
				// firefox fix
				font-weight: $fontWeightRegularAlt;
			}
		}
	}
}

/// text align
///
/// @group FamilyGlobalModifiers
.xm__txtAlign,
.xm__txtAlignFlx {
	&-right {
		@include extend-viewports-classes {
			text-align: right;
			&:not([class*="__gapi"]) > :not([class|="x"]) {
				/// Gaping
				display: inline-block;
			}
			> :not([class*="__txtA"]):not([class|="x"]) {
				/// Align
				text-align: right;
			}
		}
	}
	&-center {
		@include extend-viewports-classes {
			text-align: center;
			&:not([class*="__gapi"]) > :not([class|="x"]) {
				/// Gaping
				display: inline-block;
			}
			> :not([class*="__txtA"]):not([class|="x"]) {
				/// Align
				text-align: center;
			}
		}
	}
	&-justify {
		@include extend-viewports-classes {
			text-align: justify;
			&:not([class*="__gapi"]) > :not([class|="x"]) {
				/// Gaping
				display: inline-block;
			}
			> :not([class*="__txtA"]):not([class|="x"]) {
				/// Align
				text-align: justify;
			}
		}
	}
	/// default
	&,
	&-left {
		@include extend-viewports-classes {
			text-align: left;
			&:not([class*="__gapi"]) > :not([class|="x"]) {
				/// Gaping
				display: inline-block;
			}
			> :not([class*="__txtA"]):not([class|="x"]) {
				/// Align
				text-align: left;
			}
		}
	}
}

/// text align flex
///
/// @group FamilyGlobalModifiers
.xm__txtAlignFlx {
	&-right {
		@include extend-viewports-classes {
			@include flexbox(column, nowrap, flex-start, flex-end, inline-flex);
			> :not([class*="__txtA"]):not([class|="x"]) {
				/// Align
				@include flexbox(
					column,
					nowrap,
					flex-start,
					flex-end,
					inline-flex
				);
			}
		}
	}
	&-center {
		@include extend-viewports-classes {
			@include flexbox(column, nowrap, flex-start, center, inline-flex);
			> :not([class*="__txtA"]):not([class|="x"]) {
				/// Align
				@include flexbox(
					column,
					nowrap,
					flex-start,
					center,
					inline-flex
				);
			}
		}
	}
	&-justify {
		@include extend-viewports-classes {
			@include flexbox(column, nowrap, flex-start, stretch, inline-flex);
			> :not([class*="__txtA"]):not([class|="x"]) {
				/// Align
				@include flexbox(
					column,
					nowrap,
					flex-start,
					stretch,
					inline-flex
				);
			}
		}
	}
	/// default
	&,
	&-left {
		@include extend-viewports-classes {
			@include flexbox(
				column,
				nowrap,
				flex-start,
				flex-start,
				inline-flex
			);
			> :not([class*="__txtA"]):not([class|="x"]) {
				/// Align
				@include flexbox(
					column,
					nowrap,
					flex-start,
					flex-start,
					inline-flex
				);
			}
		}
	}
}

/// LOOPS

/// text size
///
/// @group GlobalModifiers
@each $name, $size in $fontSizes {
	.xm__txtSize-#{$name} {
		@include extend-viewports-classes {
			font-size: #{$size};
		}
	}
}
/// default
.xm__txtSize,
.xm__txtSize-normal {
	@include extend-viewports-classes {
		font-size: $fontSize;
	}
}

/// box model: margin & padding
///
/// @group GlobalModifiers
$models: margin, padding;
@each $model in $models {
	@for $i from 1 through 20 {
		/// all sides
		.xm__#{str-slice($model,1,1) + "-" + $i*5} {
			@include extend-viewports-classes {
				--#{str-slice($model, 1, 1)}: #{$i/3}rem;
			}
		}
		/// X axis
		.xm__#{str-slice($model,1,1) + "X-" + $i*5} {
			@include extend-viewports-classes {
				--#{str-slice($model, 1, 1)}x: #{$i/3}rem;
			}
		}
		/// Y axis
		.xm__#{str-slice($model,1,1) + "Y-" + $i*5} {
			@include extend-viewports-classes {
				--#{str-slice($model, 1, 1)}y: #{$i/3}rem;
			}
		}
	}
	/// default: all sides
	/// margin & padding already have defaults for X & Y axles
	.xm__#{$model},
	.xm__#{str-slice($model,1,1)} {
		@include extend-viewports-classes {
			--#{str-slice($model, 1, 1)}: 1rem;
		}
	}

	/// maybe i'm overcomplicating this
	/// I break this  two in multiple lines because of his complexity
	/// margin
	[class*="__m"]:not([class*="__mY"]):not([class*="__mX"]) {
		&:not([class*="__mT"]):not([class*="__mR"]):not([class*="__mB"]):not([class*="__mL"]) {
			/// Top, Right, Bottom, Left
			&:not([class*="min"]):not([class*="max"]) {
				/// this could caue problems if min/max is set alongside margin/padding
				&:not([class*="is__m"]) {
					/// this could cause problems in some statuses starting with m
					margin: var(--m, initial);
				}
			}
		}
	}
	/// padding
	[class*="__p"]:not([class*="__pY"]):not([class*="__pX"]):not([class*="__po"]) {
		&:not([class*="__pT"]):not([class*="__pR"]):not([class*="__pB"]):not([class*="__pL"]) {
			/// Top, Right, Bottom, Left
			&:not([class*="is__p"]) {
				/// this could cause problems in some statuses starting with p
				padding: var(--p, initial);
			}
		}
	}
	/// X axis
	[class*="__#{str-slice($model,1,1)}X"] {
		#{$model}-left: var(--#{str-slice($model, 1, 1)}x, initial);
		#{$model}-right: var(--#{str-slice($model, 1, 1)}x, initial);
	}
	/// Y axis
	[class*="__#{str-slice($model,1,1)}Y"] {
		#{$model}-top: var(--#{str-slice($model, 1, 1)}y, initial);
		#{$model}-bottom: var(--#{str-slice($model, 1, 1)}y, initial);
	}
}

/// Dimensions
$dimensions: width, height;
@each $dimension in $dimensions {
	/// width, height
	///
	/// @group GlobalModifiers
	.xm__#{$dimension} {
		&-quarter {
			@include extend-viewports-classes {
				--#{str-slice($dimension,1,1)}: 50%;
			}
		}
		&-third {
			@include extend-viewports-classes {
				--#{str-slice($dimension,1,1)}: 33%;
			}
		}
		&-half {
			@include extend-viewports-classes {
				--#{str-slice($dimension,1,1)}: 50%;
			}
		}
		&,
		&-full {
			@include extend-viewports-classes {
				--#{str-slice($dimension,1,1)}: 100%;
			}
		}
	}
	[class*="__#{str-slice($dimension,1,2)}"] {
		#{$dimension}: var(--#{str-slice($dimension, 1, 1)}, initial);
	}

	/// max width, max height
	$constrains: min, max;
	@each $constrain in $constrains {
		/// pixel based
		///
		/// @group GlobalModifiers
		$maxSizes: 1400, 1300, 1080, 980, 880, 780, 580, 480, 440, 220, 180;
		@each $size in $maxSizes {
			.xm__#{$constrain + capitalize($dimension)}-#{$size} {
				@include extend-viewports-classes {
					--m#{str-slice($constrain, 3)}#{str-slice($dimension, 1, 1)}: #{round(
							$size/15
						)}rem;
				}
			}
		}
		/// default pixel based constrains
		.xm__#{$constrain + capitalize($dimension)},
		.xm__#{$constrain + capitalize($dimension)}-1200 {
			$mildos: 1200;
			@include extend-viewports-classes {
				--m#{str-slice($constrain, 3)}#{str-slice($dimension, 1, 1)}: #{round(
						$mildos/16
					)}rem;
			}
		}

		/// min width, max width
		/// viewport width based
		///
		/// @group GlobalModifiers
		@for $i from 3 through 10 {
			.xm__#{$constrain + capitalize($dimension)}Vw-#{$i*10} {
				@include extend-viewports-classes {
					--m#{str-slice($constrain, 3)}#{str-slice($dimension, 1, 1)}: #{$i *
						10}vw;
				}
			}
			.xm__#{$constrain + capitalize($dimension)}Vh-#{$i*10} {
				@include extend-viewports-classes {
					--m#{str-slice($constrain, 3)}#{str-slice($dimension, 1, 1)}: #{$i *
						10}vh;
				}
			}
		}
		/// default viewport based constrains
		/// __maxW, __maxH, __minW, __minH
		[class*="__#{$constrain + capitalize(str-slice($dimension,1,1))}"] {
			#{$constrain}-#{$dimension}: var(
				--m#{str-slice($constrain, 3)}#{str-slice($dimension, 1, 1)},
				initial
			);
		}
		.xm__#{$constrain + capitalize($dimension)}Vw {
			@include extend-viewports-classes {
				--m#{str-slice($constrain, 3)}#{str-slice($dimension, 1, 1)}: 30vw;
			}
		}
		.xm__#{$constrain + capitalize($dimension)}Vh {
			@include extend-viewports-classes {
				--m#{str-slice($constrain, 3)}#{str-slice($dimension, 1, 1)}: 30vh;
			}
		}
	}
}

/// margin & padding
///
/// @group GlobalModifiers
$directions: top, right, bottom, left;
@each $direction in $directions {
	@for $i from 1 through 20 {
		/// margins
		.xm__m#{capitalize($direction) + "-" + $i*5} {
			@include extend-viewports-classes {
				--m#{str-slice($direction,1,1)}: #{$i/3}rem;
			}
		}
		/// paddings
		.xm__p#{capitalize($direction) + "-" + $i*5} {
			@include extend-viewports-classes {
				--p#{str-slice($direction,1,1)}: #{$i/3}rem;
			}
		}
	}
	/// margin defaults
	[class*="__m#{capitalize($direction)}"] {
		margin-#{$direction}: var(--m#{str-slice($direction, 1, 1)}, 0);
		> * {
			--m#{str-slice($direction,1,1)}: 0;
		}
	}
	.xm__m#{capitalize($direction)} {
		@include extend-viewports-classes {
			--m#{str-slice($direction,1,1)}: 1rem;
		}
	}
	/// padding defaults
	[class*="__p#{capitalize($direction)}"] {
		padding-#{$direction}: var(--p#{str-slice($direction, 1, 1)}, 0);
		> * {
			--p#{str-slice($direction,1,1)}: 0;
		}
	}
	.xm__p#{capitalize($direction)} {
		@include extend-viewports-classes {
			--p#{str-slice($direction,1,1)}: 1rem;
		}
	}
}

@for $i from 1 through 10 {
	/// z index
	/// both dimension
	///
	/// @group GlobalModifiers
	.xm__index-#{$i} {
		@include extend-viewports-classes {
			z-index: #{$i};
		}
	}

	/// grid Gap
	/// both dimension
	///
	/// @group GlobalModifiers
	/// gap using margin
	/// both axis
	/// this class applies to any container, not just flex containers, so it can't be polyfilled
	///
	/// @group GlobalModifiers
	.xm__gap-#{$i*5},
	.xm__gaping-#{$i*5} {
		@include extend-viewports-classes {
			--g: #{$i/3}rem;
		}
	}
	.xm__gapingX-#{$i*5} {
		@include extend-viewports-classes {
			> * {
				--gx: #{$i/3}rem;
			}
		}
	}
	.xm__gapingY-#{$i*5} {
		@include extend-viewports-classes {
			> * {
				--gy: #{$i/3}rem;
			}
		}
	}
}

/// grid/column gap default
[class*="__gap"]:not([class*="__gapi"]) {
	gap: var(--g);
}

/// item spacing defaults
[class*="__gapi"]:not([class*="ngX"]):not([class*="ngY"]):not([class*="__gaping-none"]) {
	/// this is a very special class to omit this specific fix
	&:not(.unfix__gaping) {
		--gc: calc(-1 * var(--g, 1rem)); // calculated gap
		margin: -0.1px var(--gc) var(--gc) -0.1px;
		box-sizing: border-box;
		&:last-child > :first-child:last-child {
			// only child, text nodes can break this
			margin: 0;
		}
	}
	> :not(br) {
		&:not([class*="__m"]),
		&[class*="__min"],
		&[class*="__max"] {
			&[class*="__txtWr"]:not([class*="__flx"]),
			&:not([class*="-wrap"]):not([class*="-reverse"]) {
				/// Wrap
				margin-bottom: var(--g);
				margin-right: var(--g);
				&:not([class*="__gapi"]) > :not([class*="__gapi"]) {
					--g: initial;
				}
			}
		}
	}
}

/// X axis
/// because of the fix is necesary to transfer the margin to the sibling element
[class*="ngX"]:not([class*="ngX-none"])
	> :not(br):not(:last-child):not([class*="__mR"]) {
	/// Right
	&.unfix__gaping,
	&:not(.xm__gaping):not([class*="__gaping:"]):not([class*="__gaping-"]) {
		margin-right: var(--gx);
		&[class*="__flx"][class*="-wrap"],
		&[class*="__flx"][class*="-reverse"],
		&[class*="__gapi"]:not([class*="ngX"]):not([class*="ngY"]):not([class*="__gaping-none"]) {
			--gx: calc(-1 * (var(--g, 1rem) - var(--gx, 1rem)));
		}
	}
}
/// Y axis
/// because of the fix is necesary to transfer the margin to the sibling element
[class*="ngY"]:not([class*="ngY-none"])
	> :not(br):not(:last-child):not([class*="__mB"]) {
	/// Bottom
	&.unfix__gaping,
	&:not(.xm__gaping):not([class*="__gaping:"]):not([class*="__gaping-"]) {
		margin-bottom: var(--gy);
		&[class*="__flx"][class*="-wrap"],
		&[class*="__flx"][class*="-reverse"],
		&[class*="__gapi"]:not([class*="ngX"]):not([class*="ngY"]):not([class*="__gaping-none"]) {
			--gy: calc(-1 * (var(--g, 1rem) - var(--gy, 1rem)));
		}
	}
}

/// defaults
.xm__gap,
.xm__gaping {
	@include extend-viewports-classes {
		--g: 1rem;
	}
}
.xm__gapingX {
	/// X dimension
	@include extend-viewports-classes {
		> * {
			--gx: 1rem;
		}
	}
}
.xm__gapingY {
	/// Y dimension
	@include extend-viewports-classes {
		> * {
			--gy: 1rem;
		}
	}
}

/// text color & text shadow & background color & borderColor
/// color based modifiers
///
/// @group ColorGlobalModifiers
@each $name, $color in $colors {
	/// striped childs
	.xm__striped-#{$name} {
		@include extend-viewports-classes {
			> :nth-child(odd) {
				--cbg: #{color($name, 0.1)};
			}
		}
	}

	/// text color
	.xm__txtColor-#{$name} {
		@include extend-viewports-classes {
			&,
			> :not([class*="__txtC"]):not([class|="x"]) {
				/// Color
				--ccl: #{color($name)};
			}
		}
	}

	/// text shadow
	.xm__txtShadow-#{$name} {
		@include extend-viewports-classes {
			&,
			> :not([class*="__txtSh"]):not([class|="x"]) {
				/// Shadow
				--csh: #{color($name)};
			}
		}
	}

	/// background color
	.xm__bgColor-#{$name} {
		@include extend-viewports-classes {
			--cbg: #{color($name)};
		}
	}

	/// borderColor
	.xm__bdrColor-#{$name} {
		@include extend-viewports-classes {
			--cbc: #{color($name)};
		}
	}

	/// shades of color
	@for $i from 1 through 9 {
		/// text color
		.xm__txtColor-#{$name}#{$i} {
			@include extend-viewports-classes {
				&,
				> :not([class*="__txtC"]):not([class|="x"]) {
					/// Shadow
					--ccl: #{color($name, $i/10)};
				}
			}
		}

		/// text shadow
		.xm__txtShadow-#{$name}#{$i} {
			@include extend-viewports-classes {
				&,
				> :not([class*="__txtSh"]):not([class|="x"]) {
					/// Shadow
					--csh: #{color($name, $i/10)};
				}
			}
		}

		/// background color
		.xm__bgColor-#{$name}#{$i} {
			@include extend-viewports-classes {
				--cbg: #{color($name, $i/10)};
			}
		}

		/// borderColor
		.xm__bdrColor-#{$name}#{$i} {
			@include extend-viewports-classes {
				--cbc: #{color($name, $i/10)};
			}
		}
	}
}

/// default striped child color
[class*="__st"] {
	/// Striped
	> :nth-child(odd) {
		background-color: var(--cbg);
	}
}
.xm__striped {
	@include extend-viewports-classes {
		> :nth-child(odd) {
			--cbg: #{color(secondary, 0.1)};
		}
	}
}

/// default color
[class*="__txtC"] {
	&,
	> :not([class*="__txtC"]):not([class|="x"]) {
		/// Color
		color: var(--ccl);
	}
}
.xm__txtColor {
	@include extend-viewports-classes {
		&,
		> :not([class*="__txtC"]):not([class|="x"]) {
			/// Color
			--ccl: #{color(dark, 0.7)};
		}
	}
}

/// default text color
[class*="__txtSh"] {
	&,
	> :not([class*="__txtSh"]):not([class|="x"]) {
		/// Shadow
		text-shadow: 1px 1px 1px var(--csh);
	}
}
.xm__txtShadow {
	@include extend-viewports-classes {
		&,
		> :not([class*="__txtSh"]):not([class|="x"]) {
			/// Shadow
			--csh: #{color(dark, 0.3)};
		}
	}
}

/// default background color
[class*="__bgC"]:not([class*="or-none"]) {
	/// Color
	background-color: var(--cbg);
}
.xm__bgColor {
	@include extend-viewports-classes {
		--cbg: #{color(light)};
	}
}

/// default borderColor
[class*="__bdrC"] {
	/// Color
	border-color: var(--cbc);
}
.xm__bdrColor {
	@include extend-viewports-classes {
		--cbc: #{color(secondary, 0.1)};
	}
}

/// termina GLOBAL MODIFIERS
