/** @format */

/// inicia GLOBAL MODIFIERS
/// Can be used in any element

/// hidden element, hide visually only
///
/// @group GlobalModifiers

.xm__hidden {
	@include extend-viewports(true) {
		width: 0.1px;
		height: 0.1px;
		opacity: 0;
		overflow: hidden;
		position: absolute;
		z-index: -1;
	}
	&-full {
		@include extend-viewports(true) {
			display: none !important;
		}
	}
}

/// flex growth and shrink
///
/// @group GlobalModifiers
.xm__flx {
	@include extend-viewports {
		flex: 1 1 auto;
	}
}

/// positon
///
/// @group GlobalModifiers
.xm__position {
	&-fixed {
		@include extend-viewports {
			position: fixed;
		}
	}
	&-sticky {
		@include extend-viewports {
			position: sticky;
		}
	}
	&-relative {
		@include extend-viewports {
			position: relative;
		}
	}
	&-absolute {
		@include extend-viewports {
			position: absolute;
		}
	}
	/// default
	&,
	&-static {
		@include extend-viewports {
			position: static;
		}
	}
}

/// text wrap
///
/// @group GlobalModifiers
.xm__txtWrap {
	&-nowrap {
		@include extend-viewports {
			white-space: nowrap;
		}
	}
	/// default
	&,
	&-wrap {
		@include extend-viewports {
			white-space: normal;
		}
	}
}

/// box margins
/// X axis
///
/// @group GlobalModifiers
.xm__mX {
	&-left {
		@include extend-viewports {
			margin-left: 0;
			margin-right: auto;
		}
	}
	&-right {
		@include extend-viewports {
			margin-left: auto;
			margin-right: 0;
		}
	}
	/// default
	&,
	&-center {
		@include extend-viewports {
			margin-left: auto;
			margin-right: auto;
		}
	}
}

/// box margins
/// Y axis
///
/// @group GlobalModifiers
.xm__mY {
	&-top {
		@include extend-viewports {
			margin-top: 0;
			margin-bottom: auto;
		}
	}
	&-bottom {
		@include extend-viewports {
			margin-top: auto;
			margin-bottom: 0;
		}
	}
	/// default
	&,
	&-center {
		@include extend-viewports {
			margin-top: auto;
			margin-bottom: auto;
		}
	}
}

/// box padding
/// X axis
///
/// @group GlobalModifiers
.xm__pX {
	/// there is no thing such as padding auto
	@include extend-viewports {
		padding-left: 1rem;
		padding-right: 1rem;
	}
}

/// box padding
/// Y axis
///
/// @group GlobalModifiers
.xm__pY {
	/// there is no thing such as padding auto
	@include extend-viewports {
		padding-top: 1rem;
		padding-bottom: 1rem;
	}
}

/// flexbox justify content
///
/// @group GlobalModifiers
.xm__flxJustify {
	&-end {
		@include extend-viewports {
			justify-content: flex-end;
		}
	}
	&-start {
		@include extend-viewports {
			justify-content: flex-start;
		}
	}
	&-around {
		@include extend-viewports {
			justify-content: space-around;
		}
	}
	&-evenly {
		@include extend-viewports {
			justify-content: space-evenly;
		}
	}
	&-between {
		@include extend-viewports {
			justify-content: space-between;
		}
	}
	/// default
	&,
	&-center {
		@include extend-viewports {
			justify-content: center;
		}
	}
}

/// flexbox align items
///
/// @group GlobalModifiers
.xm__flxAlign {
	&-end {
		@include extend-viewports {
			align-items: flex-end;
		}
	}
	&-start {
		@include extend-viewports {
			align-items: flex-start;
		}
	}
	&-stretch {
		@include extend-viewports {
			align-items: stretch;
		}
	}
	&-baseline {
		@include extend-viewports {
			align-items: baseline;
		}
	}
	/// default
	&,
	&-center {
		@include extend-viewports {
			align-items: center;
		}
	}
}

/// font weight
///
/// @group GlobalModifiers
.xm__txtWeight {
	&-bold {
		@include extend-viewports {
			font-weight: $fontWeightBold;
			@supports (-moz-appearance: none) {
				// firefox fix
				font-weight: $fontWeightBoldAlt;
			}
		}
	}
	&-regular {
		@include extend-viewports {
			font-weight: $fontWeightRegular;
			@supports (-moz-appearance: none) {
				// firefox fix
				font-weight: $fontWeightRegularAlt;
			}
		}
	}
}

/// text align
///
/// @group FamilyGlobalModifiers
.xm__txtAlign,
.xm__txtAlignFlx {
	&-right {
		@include extend-viewports {
			text-align: right;
			&:not([class*="__gaping"]) > :not([class|="x"]) {
				display: inline-block;
			}
			> :not([class*="__txtAlign"]):not([class|="x"]) {
				text-align: right;
			}
		}
	}
	&-center {
		@include extend-viewports {
			text-align: center;
			&:not([class*="__gaping"]) > :not([class|="x"]) {
				display: inline-block;
			}
			> :not([class*="__txtAlign"]):not([class|="x"]) {
				text-align: center;
			}
		}
	}
	&-justify {
		@include extend-viewports {
			text-align: justify;
			&:not([class*="__gaping"]) > :not([class|="x"]) {
				display: inline-block;
			}
			> :not([class*="__txtAlign"]):not([class|="x"]) {
				text-align: justify;
			}
		}
	}
	/// default
	&,
	&-left {
		@include extend-viewports {
			text-align: left;
			&:not([class*="__gaping"]) > :not([class|="x"]) {
				display: inline-block;
			}
			> :not([class*="__txtAlign"]):not([class|="x"]) {
				text-align: left;
			}
		}
	}
}

/// text align flex
///
/// @group FamilyGlobalModifiers
.xm__txtAlignFlx {
	&-right {
		@include extend-viewports {
			@include flexbox(column, nowrap, flex-start, flex-end, inline-flex);
			> :not([class*="__txtAlign"]):not([class|="x"]) {
				@include flexbox(
					column,
					nowrap,
					flex-start,
					flex-end,
					inline-flex
				);
			}
		}
	}
	&-center {
		@include extend-viewports {
			@include flexbox(column, nowrap, flex-start, center, inline-flex);
			> :not([class*="__txtAlign"]):not([class|="x"]) {
				@include flexbox(
					column,
					nowrap,
					flex-start,
					center,
					inline-flex
				);
			}
		}
	}
	&-justify {
		@include extend-viewports {
			@include flexbox(column, nowrap, flex-start, stretch, inline-flex);
			> :not([class*="__txtAlign"]):not([class|="x"]) {
				@include flexbox(
					column,
					nowrap,
					flex-start,
					stretch,
					inline-flex
				);
			}
		}
	}
	/// default
	&,
	&-left {
		@include extend-viewports {
			@include flexbox(
				column,
				nowrap,
				flex-start,
				flex-start,
				inline-flex
			);
			> :not([class*="__txtAlign"]):not([class|="x"]) {
				@include flexbox(
					column,
					nowrap,
					flex-start,
					flex-start,
					inline-flex
				);
			}
		}
	}
}

/// LOOPS

/// text size
///
/// @group GlobalModifiers
@each $name, $size in $fontSizes {
	.xm__txtSize-#{$name} {
		@include extend-viewports {
			font-size: #{$size};
		}
	}
}
/// default
.xm__txtSize,
.xm__txtSize-normal {
	@include extend-viewports {
		font-size: $fontSize;
	}
}

/// box model: margin & padding
///
/// @group GlobalModifiers
$models: margin, padding;
@each $model in $models {
	@for $i from 1 through 20 {
		/// all sides
		.xm__#{str-slice($model,1,1) + "-" + $i*5} {
			@include extend-viewports {
				#{$model}: #{$i/3}rem;
			}
		}
		/// X axis
		.xm__#{str-slice($model,1,1) + "X-" + $i*5} {
			@include extend-viewports {
				#{$model}-left: #{$i/3}rem;
				#{$model}-right: #{$i/3}rem;
			}
		}
		/// Y axis
		.xm__#{str-slice($model,1,1) + "Y-" + $i*5} {
			@include extend-viewports {
				#{$model}-top: #{$i/3}rem;
				#{$model}-bottom: #{$i/3}rem;
			}
		}
	}
	/// default: all sides
	.xm__#{$model},
	.xm__#{str-slice($model,1,1)} {
		@include extend-viewports {
			#{$model}: 1rem;
		}
	}
	/// margin & padding already have defaults for X & Y axles
}

/// Dimensions
$dimensions: width, height;
@each $dimension in $dimensions {
	/// width, height
	///
	/// @group GlobalModifiers
	.xm__#{$dimension} {
		&-quarter {
			@include extend-viewports {
				#{$dimension}: 50%;
			}
		}
		&-third {
			@include extend-viewports {
				#{$dimension}: 33%;
			}
		}
		&-half {
			@include extend-viewports {
				#{$dimension}: 50%;
			}
		}
		&,
		&-full {
			@include extend-viewports {
				#{$dimension}: 100%;
			}
		}
	}

	/// max width, max height
	$constrains: min, max;
	@each $constrain in $constrains {
		/// pixel based
		///
		/// @group GlobalModifiers
		$maxSizes: 1400, 1300, 1080, 980, 880, 780, 580, 480, 440, 220, 180;
		@each $size in $maxSizes {
			.xm__#{$constrain + capitalize($dimension)}-#{$size} {
				@include extend-viewports {
					#{$constrain}-#{$dimension}: #{$size}px;
				}
			}
		}
		/// default pixel based constrains
		.xm__#{$constrain + capitalize($dimension)},
		.xm__#{$constrain + capitalize($dimension)}-1200 {
			@include extend-viewports {
				max-#{$dimension}: 1200px;
			}
		}

		/// min width, max width
		/// viewport width based
		///
		/// @group GlobalModifiers
		@for $i from 3 through 10 {
			.xm__#{$constrain + capitalize($dimension)}Vw-#{$i*10} {
				@include extend-viewports {
					#{$constrain}-#{$dimension}: #{$i * 10}vw;
				}
			}
			.xm__#{$constrain + capitalize($dimension)}Vh-#{$i*10} {
				@include extend-viewports {
					#{$constrain}-#{$dimension}: #{$i * 10}vh;
				}
			}
		}
		/// default viewport based constrains
		.xm__#{$constrain + capitalize($dimension)}Vw {
			@include extend-viewports {
				#{$constrain}-#{$dimension}: 30vw;
			}
		}
		.xm__#{$constrain + capitalize($dimension)}Vh {
			@include extend-viewports {
				#{$constrain}-#{$dimension}: 30vh;
			}
		}
	}
}

/// margin & padding
///
/// @group GlobalModifiers
$directions: top, right, bottom, left;
@each $direction in $directions {
	@for $i from 1 through 20 {
		/// margins
		.xm__m#{capitalize($direction) + "-" + $i*5} {
			@include extend-viewports {
				margin-#{$direction}: #{$i/3}rem;
			}
		}
		/// paddings
		.xm__p#{capitalize($direction) + "-" + $i*5} {
			@include extend-viewports {
				padding-#{$direction}: #{$i/3}rem;
			}
		}
	}
	/// margin defaults
	.xm__m#{capitalize($direction)} {
		@include extend-viewports {
			margin-#{$direction}: 1rem;
		}
	}
	/// padding defaults
	.xm__p#{capitalize($direction)} {
		@include extend-viewports {
			padding-#{$direction}: 1rem;
		}
	}
}

@for $i from 1 through 10 {
	/// z index
	/// both dimension
	///
	/// @group GlobalModifiers
	.xm__index-#{$i} {
		@include extend-viewports {
			z-index: #{$i};
		}
	}

	/// grid Gap
	/// both dimension
	///
	/// @group GlobalModifiers
	.xm__gap-#{$i*5},
	.xm__grdGap-#{$i*5} {
		@include extend-viewports {
			gap: #{$i/3}rem;
		}
	}

	/// gap using margin
	/// both axis
	///
	/// @group GlobalModifiers
	.xm__gaping-#{$i*5} {
		@include extend-viewports {
			/// this is a very special class to omit this specific fix
			&:not(.unfix__gaping) {
				margin: -0.1px -#{$i/3}rem -#{$i/3}rem -0.1px;
				box-sizing: border-box;
			}
			> :not(br) {
				&:not([class*="__m"]),
				&[class*="__min"],
				&[class*="__max"] {
					&[class*="__txtWrap"]:not([class*="__flx"]),
					&:not([class*="-wrap"]):not([class*="-reverse"]) {
						margin-bottom: #{$i/3}rem;
						margin-right: #{$i/3}rem;
					}
				}
			}
		}
	}
	.xm__gapingX-#{$i*5} {
		/// X axis
		/// because of the fix is necesary to transfer the margin to the sibling element
		@include extend-viewports {
			> :not(br):not(:last-child) {
				&:not([class*="__mRight"]) {
					/// TODO: .xm__gaping is not targeting responsive
					&.unfix__gaping,
					&:not(.xm__gaping):not([class*="__gaping-"]) {
						margin-right: #{$i/3}rem;
					}
				}
				&:not(.unfix__gaping)[class*="__gaping"]:not([class*="__gapingX"]):not([class*="__gapingY"])
					+ * {
					margin-left: #{$i/3}rem;
				}
			}
		}
	}
	.xm__gapingY-#{$i*5} {
		/// Y axis
		/// because of the fix is necesary to transfer the margin to the sibling element
		@include extend-viewports {
			> :not(br):not(:last-child) {
				&:not([class*="__mBottom"]) {
					/// TODO: .xm__gaping is not targeting responsive
					&.unfix__gaping,
					&:not(.xm__gaping):not([class*="__gaping-"]) {
						margin-bottom: #{$i/3}rem;
					}
				}
				&:not(.unfix__gaping)[class*="__gaping"]:not([class*="__gapingX"]):not([class*="__gapingY"])
					+ * {
					margin-top: #{$i/3}rem;
				}
			}
		}
	}
}

/// grid/column gap default
.xm__gap,
.xm__grdGap {
	@include extend-viewports {
		gap: 1rem;
	}
}

/// item spacing defaults
.xm__gaping {
	@include extend-viewports {
		/// this is a very special class to omit this specific fix
		&:not(.unfix__gaping) {
			margin: -0.1px -1rem -1rem -0.1px;
			box-sizing: border-box;
		}
		> :not(br) {
			&:not([class*="__m"]),
			&[class*="__min"],
			&[class*="__max"] {
				margin-bottom: 1rem;
				margin-right: 1rem;
			}
		}
	}
}
.xm__gapingX {
	/// X dimension
	@include extend-viewports {
		> :not([class*="__mRight"]):not(:last-child) {
			margin-right: 1rem;
		}
	}
}
.xm__gapingY {
	/// Y dimension
	@include extend-viewports {
		> :not([class*="__mBottom"]):not(:last-child) {
			margin-bottom: 1rem;
		}
	}
}

/// text color & text shadow & background color & borderColor
/// color based modifiers
///
/// @group ColorGlobalModifiers
@each $name, $color in $colors {
	/// striped childs
	.xm__striped-#{$name} {
		@include extend-viewports {
			> :nth-child(odd) {
				background-color: #{color($name, 0.1)};
			}
		}
	}

	/// text color
	.xm__txtColor-#{$name} {
		@include extend-viewports {
			&,
			> :not([class*="__txtColor"]):not([class|="x"]) {
				color: #{color($name)};
			}
		}
	}

	/// text shadow
	.xm__txtShadow-#{$name} {
		@include extend-viewports {
			&,
			> :not([class*="__txtShadow"]):not([class|="x"]) {
				text-shadow: 1px 1px 1px #{color($name)};
			}
		}
	}

	/// background color
	.xm__bgColor-#{$name} {
		@include extend-viewports {
			background-color: #{color($name)};
		}
	}

	/// borderColor
	.xm__bdrColor-#{$name} {
		@include extend-viewports {
			border-color: #{color($name)};
		}
	}

	/// shades of color
	@for $i from 1 through 9 {
		/// text color
		.xm__txtColor-#{$name}#{$i} {
			@include extend-viewports {
				&,
				> :not([class*="__txtColor"]):not([class|="x"]) {
					color: #{color($name, $i/10)};
				}
			}
		}

		/// text shadow
		.xm__txtShadow-#{$name}#{$i} {
			@include extend-viewports {
				&,
				> :not([class*="__txtShadow"]):not([class|="x"]) {
					text-shadow: 1px 1px 1px #{color($name, $i/10)};
				}
			}
		}

		/// background color
		.xm__bgColor-#{$name}#{$i} {
			@include extend-viewports {
				background-color: #{color($name, $i/10)};
			}
		}

		/// borderColor
		.xm__bdrColor-#{$name}#{$i} {
			@include extend-viewports {
				border-color: #{color($name, $i/10)};
			}
		}
	}
}

/// default striped child color
.xm__striped {
	@include extend-viewports {
		> :nth-child(odd) {
			background-color: color(secondary, 0.1);
		}
	}
}

/// default color
.xm__txtColor {
	@include extend-viewports {
		&,
		> :not([class*="__txtColor"]):not([class|="x"]) {
			color: color(dark, 0.7);
		}
	}
}

/// default text color
.xm__txtShadow {
	@include extend-viewports {
		&,
		> :not([class*="__txtShadow"]):not([class|="x"]) {
			text-shadow: 1px 1px 1px color(dark, 0.3);
		}
	}
}

/// default background color
.xm__bgColor {
	@include extend-viewports {
		background-color: color(light);
	}
}

/// default borderColor
.xm__bdrColor {
	@include extend-viewports {
		border-color: color(secondary, 0.1);
	}
}

/// termina GLOBAL MODIFIERS
