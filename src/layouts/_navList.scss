@use "../utils/module" as utils;

// list element
//
// @name Columns
// @group Layouts
@mixin list {
	.#{utils.$prefix__defaultWithSeparator}toggle--list {
		display: block;
		@include utils.flex-box(row, nowrap, space-between, center);
		i.#{utils.$component__icon},
		.#{utils.$component__svg} {
			width: 1.8rem;
		}
	}

	nav.#{utils.$layout__list} {
		> input[type^="c"] {
			display: none;
		}
		&.#{utils.$prefix__defaultWithSeparator}is--active,
		> input[type^="c"]:checked ~ {
			.#{utils.$prefix__defaultWithSeparator}toggle--list {
				font-weight: utils.weight(bold);
				margin-bottom: 1rem;
				i.#{utils.$component__icon},
				.#{utils.$component__svg} {
					transform: rotate(180deg);
				}
			}
			.#{utils.$prefix__defaultWithSeparator}toggle--list + {
				ul.#{utils.$layout__list}-group,
				ol.#{utils.$layout__list}-group {
					max-height: none;
				}
			}
		}

		.#{utils.$prefix__defaultWithSeparator}toggle--list + {
			ul.#{utils.$layout__list}-group,
			ol.#{utils.$layout__list}-group {
				max-height: 0;
				overflow: hidden;
				> li {
					width: 100%;
				}
			}
		}
	}
	// .list-title
	span.#{utils.$layout__list}-title {
		display: block;
		margin-bottom: 1rem;
	}
	ul,
	ol {
		// .list-group
		&.#{utils.$layout__list}-group {
			overflow: visible;

			// flow direction
			//
			// @group Modifiers
			&.#{utils.$prefix__default}--flow-row {
				@include utils.flex-box(row, nowrap, flex-start, center);
				> li:not(:last-child) {
					margin-right: 1rem;
				}
			}
			// default flow
			&:not([class*="--flow"]),
			&.#{utils.$prefix__default}--flow-column {
				// Flow
				@include utils.flex-box(column, nowrap, flex-start, stretch);
				> *:not(:last-child) {
					margin-bottom: 0.5rem;
				}
			}

			> li {
				&,
				:not([class*="--txtA"]) {
					text-align: left;
				}
				&,
				:not([class*="--txtWrap"]) {
					white-space: pre-line;
				}
				a,
				label,
				button {
					line-height: utils.$size__lineHeightMedium;
				}
			}
		}
	}
}
