/// # Flexbox layout
/// Flexbox layout system
/// ```css
///  .x-flx
///
///  /** or inline */
///  .x-flxInline
/// ```
/// This layout makes use of the global flx union
///
/// ## Requirements:
/// None
///
/// ## Modifiers:
/// ### Row flex flow
/// Row direction and wrapping behavior.
/// ```css
///  .x-flx.m__flxRow
///
///  /** it can be reversed */
///  .x-flx.m__flxRowReverse
///
///  /** or allow content wrapping */
///  .x-flx.m__flxRow-wrap
///  .x-flx.m__flxRowReverse-wrap
/// ```
/// ### Column flex flow
/// Column direction and wrapping behavior.
/// ```css
///  .x-flx.m__flxColumn
///
///  /** it can be reversed */
///  .x-flx.m__flxColumnReverse
///
///  /** or allow content wrapping */
///  .x-flx.m__flxColumn-wrap
///  .x-flx.m__flxColumnReverse-wrap
/// ```
///
/// ## Unions:
/// None
///
/// @group layout-flex
/// @example njk
///  <div class="x-flx m__flxColumn">
///   TODO: flexbox example
///  </div>

// flex container
.x-flx {
	@include extend-device-interactions {
		display: flex;
	}
}

// flex inline container
.x-flxInline {
	@include extend-device-interactions {
		display: inline-flex;
		position: static; // why? (27/03/2021)
	}
}

// flexbox container
.x-flx,
.x-flxInline {
	@include extend-device-interactions {
		&:not([class*="__gap"]) {
			// this already matches .xm__gaping classes
			gap: 1rem;
		}
	}
	// flexbox row container
	//
	// @group Modifiers
	&.m__flxRow {
		&,
		&-wrap,
		&-reverse,
		&-nowrap {
			@include extend-viewports-classes(true, $viewports) {
				flex-direction: row;
			}
		}
	}
	&.m__flxRowReverse {
		&,
		&-wrap,
		&-reverse,
		&-nowrap {
			@include extend-viewports-classes(true, $viewports) {
				flex-direction: row-reverse;
			}
		}
	}

	// flexbox flex container
	//
	// @group Modifiers
	&.m__flxColumn {
		&,
		&-wrap,
		&-reverse,
		&-nowrap {
			@include extend-viewports-classes(true, $viewports) {
				flex-direction: column;
			}
		}
	}
	&.m__flxColumnReverse {
		&,
		&-wrap,
		&-reverse,
		&-nowrap {
			@include extend-viewports-classes(true, $viewports) {
				flex-direction: column-reverse;
			}
		}
	}

	// an union could be a shorter solution, but is a huge breaking change
	&.m__flxRow,
	&.m__flxColumn,
	&.m__flxRowReverse,
	&.m__flxColumnReverse {
		&-wrap {
			@include extend-viewports-classes(true, $viewports) {
				flex-wrap: wrap;
			}
		}
		&-reverse {
			@include extend-viewports-classes(true, $viewports) {
				flex-wrap: wrap-reverse;
			}
		}
		// default
		&,
		&-nowrap {
			@include extend-viewports-classes(true, $viewports) {
				flex-wrap: nowrap;
			}
		}
	}

	// gaping fix
	// gaping has to be explicit now to take effect
	&[class*="__gapi"] {
		&:last-child:not([class*="x-item"]) {
			&[class*="__flxR"] {
				// row fix
				> :not(.unfix__gaping) {
					&[class*="__gapi"]:not([class*="ngX"]):not([class*="ngY"]):not([class*="__gaping-no"]) {
						&:first-child:only-of-type,
						&:last-child {
							// margin-bottom: 0;
							margin-right: calc(-1 * (var(--g) - var(--gx)));
							margin-bottom: calc(-1 * (var(--g) - var(--gx)));
						}
					}
				}
			}
			&[class*="__flxC"] {
				// column fix
				> :not(.unfix__gaping) {
					&[class*="__gapi"]:not([class*="ngX"]):not([class*="ngY"]):not([class*="__gaping-no"]) {
						&:first-child:only-of-type,
						&:last-child {
							// margin-bottom: 0;
							margin-right: calc(-1 * (var(--g) - var(--gy)));
							margin-bottom: calc(-1 * (var(--g) - var(--gy)));
						}
					}
				}
			}
		}
		// column & row fix
		&[class*="__flxR"],
		&[class*="__flxC"] {
			// Row, Column
			&:last-child:not([class*="x-item"])
				> :last-child:not(.unfix__gaping) {
				&[class*="__gapi"]:not([class*="ngX"]):not([class*="ngY"]):not([class*="__gaping-no"]) {
					margin: 0;
				}
			}
		}
	}
}
