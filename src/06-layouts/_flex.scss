/** @format */

/// # Flexbox layout
/// Flexbox layout system
/// ```css
///  .x-flx
///  /** or inline */
///  .x-flxInline
/// ```
/// This layout makes use of the global flx union
///
/// ## Requirements:
/// none
///
/// ## Modifiers:
/// ### Row flex flow
/// Row direction and wrapping behavior.
/// ```css
///  .x-flx.m__flxRow
///
///  /** it can be reversed */
///  .x-flx.m__flxRowReverse
///
///  /** or allow content wrapping */
///  .x-flx.m__flxRow-wrap
///  .x-flx.m__flxRowReverse-wrap
/// ```
/// ### Column flex flow
/// Column direction and wrapping behavior.
/// ```css
///  .x-flx.m__flxColumn
///
///  /** it can be reversed */
///  .x-flx.m__flxColumnReverse
///
///  /** or allow content wrapping */
///  .x-flx.m__flxColumn-wrap
///  .x-flx.m__flxColumnReverse-wrap
/// ```
///
/// ## Unions:
/// none
///
/// @group layout-flex
/// @example njk
///  <div class="x-flx m__flxColumn">
///   TODO: flexbox example
///  </div>

// flex container
.x-flx {
	@include extend-device-interactions {
		display: flex;
	}
}

// flex inline container
.x-flxInline {
	@include extend-device-interactions {
		display: inline-flex;
		position: static; // why? (27/03/2021)
	}
}

// flexbox container
[class*="-flx"] {
	// flexbox row container
	//
	// @group Modifiers
	&.m__flxRow {
		&,
		&-wrap,
		&-reverse,
		&-nowrap {
			@include extend-viewports-classes {
				flex-direction: row;
			}
		}
	}
	&.m__flxRowReverse {
		&,
		&-wrap,
		&-reverse,
		&-nowrap {
			@include extend-viewports-classes {
				flex-direction: row-reverse;
			}
		}
	}
	&.m__flxRow,
	&.m__flxRowReverse {
		// default
		&,
		&-nowrap {
			@include extend-viewports-classes {
				&:not([class*="__gapi"]) > :not(br):not(:last-child) {
					// Gaping
					&:not([class*="__m"]),
					&[class*="__min"],
					&[class*="__max"] {
						margin-right: var(--g, 1rem);
					}
				}
			}
		}
	}

	// flexbox flex container
	//
	// @group Modifiers
	&.m__flxColumn {
		&,
		&-wrap,
		&-reverse,
		&-nowrap {
			@include extend-viewports-classes {
				flex-direction: column;
			}
		}
	}
	&.m__flxColumnReverse {
		&,
		&-wrap,
		&-reverse,
		&-nowrap {
			@include extend-viewports-classes {
				flex-direction: column-reverse;
			}
		}
	}
	&.m__flxColumn,
	&.m__flxColumnReverse {
		// default
		&,
		&-nowrap {
			@include extend-viewports-classes {
				&:not([class*="__gapi"]) > :not(br):not(:last-child) {
					// Gaping
					&:not([class*="__m"]),
					&[class*="__min"],
					&[class*="__max"] {
						margin-bottom: var(--g, 1rem);
					}
				}
			}
		}
	}

	// an union could be a shorter solution, but is a huge breaking change
	&.m__flxRow,
	&.m__flxColumn,
	&.m__flxRowReverse,
	&.m__flxColumnReverse {
		&-wrap {
			@include extend-viewports-classes {
				flex-wrap: wrap;
			}
		}
		&-reverse {
			@include extend-viewports-classes {
				flex-wrap: wrap-reverse;
			}
		}
		&-wrap,
		&-reverse {
			@include extend-viewports-classes {
				&:not([class*="__gapi"]) {
					// Gaping
					// this is a very special class to omit this specific fix
					&:not(.unfix__gaping) {
						--gc: calc(-1 * var(--g, 1rem)); // calculated gap
						margin: -0.1px var(--gc) var(--gc) -0.1px;
						box-sizing: border-box;
						&:last-child > :first-child:last-child {
							// only child, text nodes can break this
							margin: 0;
						}
					}
					> :not(br):not(.xm__m):not(.xm__margin):not([class*="__mX"]):not([class*="__mY"]) {
						&:not([class*="__mT"]):not([class*="__mL"]):not([class*="__mB"]):not([class*="__mR"]) {
							&[class*="__txtWr"]:not([class*="__flx"]),
							&:not([class*="-wrap"]):not([class*="-reverse"]) {
								margin-bottom: var(--g, 1rem);
								margin-right: var(--g, 1rem);
							}
						}
					}
				}
			}
		}
		// default
		&,
		&-nowrap {
			@include extend-viewports-classes {
				flex-wrap: nowrap;
			}
		}
	}
}
