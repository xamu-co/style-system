/** @format */

/// Grid container
///
/// @group Layouts
.x-grid {
	display: grid;
	&:not([class*="xm__grdGap"]):not([class*="xm__gap"]) {
		gap: 2rem;
	}

	/// columns grid
	///
	/// @group Modifiers
	&.m__grdColumns {
		&-voidLeft {
			@include extend-viewports {
				grid-template-areas: ". content";
			}
		}
		&-voidLeftAlt {
			@include extend-viewports {
				grid-template-areas: ". . content content content";
			}
		}
		&-voidRight {
			@include extend-viewports {
				grid-template-areas: "content .";
			}
		}
		&-voidRightAlt {
			@include extend-viewports {
				grid-template-areas: "content content content . .";
			}
		}
		&-autoMin {
			@include extend-viewports {
				grid-template-columns: repeat(
					auto-fit,
					minmax($minColumnSize/3, max-content)
				);
			}
		}
		&,
		&-auto {
			/// default
			@include extend-viewports {
				grid-template-columns: repeat(
					auto-fit,
					minmax($minColumnSize, 1fr)
				);
			}
		}
		&-voidLeft,
		&-voidLeftAlt {
			@include extend-viewports {
				> *:last-child {
					grid-area: content;
				}
			}
		}
		&-voidRight,
		&-voidRightAlt {
			@include extend-viewports {
				> *:first-child {
					grid-area: content;
				}
			}
		}
		&-voidLeft,
		&-voidLeftAlt,
		&-voidRight,
		&-voidRightAlt {
			@include extend-viewports {
				grid-template-columns: repeat(2, minmax($minColumnSize, 1fr));
			}
		}
		&,
		&-auto,
		&-autoMin,
		&-voidLeft,
		&-voidLeftAlt,
		&-voidRight,
		&-voidRightAlt {
			@include extend-viewports {
				grid-auto-rows: minmax(min-content, 100%);
			}
		}
	}
	@for $i from 2 through 12 {
		&.m__grdColumns-#{$i} {
			@include extend-viewports {
				grid-template-columns: repeat(
					auto-fit,
					minmax(#{$minColumnSize/$i * 3}, 1fr)
				);
				grid-auto-rows: minmax(min-content, 100%);
			}
		}
	}
}

/// item in grid
///
/// @group Layouts
.x-grid-item {
	width: 100%;
	height: 100%;
	// @media (min-width: $viewportMd + 1) {
	/// grid column span, restricted to wide viewports
	///
	/// @group Modifiers
	@for $i from 3 through 10 {
		&.m__grdColumnSpan-#{$i} {
			@include extend-viewports {
				grid-column: span #{$i};
			}
		}
		&.m__grdRowSpan-#{$i} {
			@include extend-viewports {
				grid-row: span #{$i};
			}
		}
	}
	/// defaults
	&.m__grdColumnSpan {
		&,
		&-2 {
			@include extend-viewports {
				grid-column: span 2;
			}
		}
	}
	&.m__grdRowSpan {
		&,
		&-2 {
			@include extend-viewports {
				grid-row: span 2;
			}
		}
	}
	// }
}
