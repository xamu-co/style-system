/** @format */

/// Grid container
///
/// @group Layouts
.x-grd {
	display: grid;
	// height: auto;
	&:not([class*="xm__grdGap"]):not([class*="xm__gap"]) {
		gap: 2rem;
	}

	/// columns grid
	///
	/// @group Modifiers
	&.m__grdColumns {
		& {
			/// default
			@include extend-viewports {
				grid-template-columns: repeat(
					auto-fit,
					minmax($minColumnSize, 1fr)
				);
			}
		}
		&-autoMin {
			@include extend-viewports {
				grid-template-columns: repeat(
					auto-fit,
					minmax($minColumnSize/3, max-content)
				);
			}
		}
		&-auto {
			@include extend-viewports {
				grid-template-columns: repeat(auto-fit, 1fr);
			}
		}
		&,
		&-auto,
		&-autoMin {
			@include extend-viewports {
				grid-auto-rows: minmax(min-content, 100%);
				> * {
					box-sizing: border-box;
				}
			}
		}
	}
	@for $i from 2 through 12 {
		&.m__grdColumns-#{$i} {
			@include extend-viewports {
				grid-template-columns: repeat(
					auto-fit,
					minmax(#{$minColumnSize/$i * 3}, 1fr)
				);
				grid-auto-rows: minmax(min-content, 100%);
				> * {
					box-sizing: border-box;
				}
			}
		}
	}
	/// bi columns grid
	///
	/// @group Unions
	&.u__grdVoidLeft {
		&,
		&-1,
		&-1-1 {
			@include extend-viewports {
				grid-template-columns: repeat(2, 1fr);
				grid-template-areas: ". content";
			}
		}
		&-1-4 {
			@include extend-viewports {
				grid-template-columns: repeat(5, 1fr);
				grid-template-areas: ". content content content content";
			}
		}
		&-2-3 {
			@include extend-viewports {
				grid-template-columns: repeat(5, 1fr);
				grid-template-areas: ". . content content content";
			}
		}
		&-3-2 {
			@include extend-viewports {
				grid-template-columns: repeat(5, 1fr);
				grid-template-areas: ". . . content content";
			}
		}
		&,
		&-1,
		&-1-1,
		&-1-4,
		&-2-3,
		&-3-2 {
			@include extend-viewports {
				grid-auto-rows: minmax(min-content, 100%);
				> * {
					box-sizing: border-box;
					&:last-child {
						grid-area: content;
					}
				}
			}
		}
	}
	&.u__grdVoidRight {
		&,
		&-1,
		&-1-1 {
			@include extend-viewports {
				grid-template-columns: repeat(2, 1fr);
				grid-template-areas: "content .";
			}
		}
		&-4-1 {
			@include extend-viewports {
				grid-template-columns: repeat(5, 1fr);
				grid-template-areas: "content content content content .";
			}
		}
		&-3-2 {
			@include extend-viewports {
				grid-template-columns: repeat(5, 1fr);
				grid-template-areas: "content content content . .";
			}
		}
		&-2-3 {
			@include extend-viewports {
				grid-template-columns: repeat(5, 1fr);
				grid-template-areas: "content content . . .";
			}
		}
		&,
		&-1,
		&-1-1,
		&-4-1,
		&-3-2,
		&-2-3 {
			@include extend-viewports {
				grid-auto-rows: minmax(min-content, 100%);
				> * {
					box-sizing: border-box;
					&:first-child {
						grid-area: content;
					}
				}
			}
		}
	}
}

/// item in grid
///
/// @group Layouts
.x-grd-item {
	width: 100%;
	height: 100%;
	// @media (min-width: $viewportMd + 1) {
	/// grid column span, restricted to wide viewports
	///
	/// @group Modifiers
	@for $i from 3 through 10 {
		&.m__grdColumnSpan-#{$i} {
			@include extend-viewports {
				grid-column: span #{$i};
			}
		}
		&.m__grdRowSpan-#{$i} {
			@include extend-viewports {
				grid-row: span #{$i};
			}
		}
	}
	/// defaults
	&.m__grdColumnSpan {
		&,
		&-2 {
			@include extend-viewports {
				grid-column: span 2;
			}
		}
	}
	&.m__grdRowSpan {
		&,
		&-2 {
			@include extend-viewports {
				grid-row: span 2;
			}
		}
	}
	// }
}
