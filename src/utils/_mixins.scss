@use "system";
@use "variables";
@use "sass:meta";

/*
	A personal collection of usefull mixins
	I created the flexbox one and consider it the most useful
	Some of them are not that necesary cuz the were mean for prefixing, but autoprefixer solves that already
	
	assumes variables have already been imported
*/

// viewport extend
@mixin extend-viewports-classes(
	$desktop: false,
	$localViewports: variables.$modifiersViewports
) {
	@content;
	@if variables.$toggle__responsiveClasses {
		@each $name, $viewport in $localViewports {
			// mobile first
			@media (min-width: ($viewport + 1)) {
				// default: class selector
				&\:#{$name} {
					@content;
				}
			}
			// desktop first
			@if $desktop {
				@media (max-width: $viewport) {
					// default: class selector
					&\:#{$name}-inv {
						@content;
					}
				}
			}
		}
	}
}
// alternative for attrs
// needs improvements
@mixin extend-viewports-attrs(
	$desktop: false,
	$localViewports: variables.$modifiersViewports
) {
	@content;
	@if variables.$toggle__responsiveClasses {
		@each $name, $viewport in $localViewports {
			@each $selector in & {
				$not: str-slice(#{$selector}, str-length(#{$selector})) == ")";
				$minus: if($not, -4, -3);
				$newSelector: system.str-replace(
					system.str-replace(#{$selector}, "=", '="'),
					"]",
					'"]'
				);
				// mobile first
				@media (min-width: ($viewport + 1)) {
					// attr selector support
					$end: if($not, '"])', '"]');
					@at-root #{str-slice($newSelector, 1, $minus)
							+ "\:"
							+ $name
							+ $end} {
						@content;
					}
				}

				// desktop first
				@if $desktop {
					@media (max-width: $viewport) {
						// attr selector support
						$end: if($not, '-inv"])', '-inv"]');
						@at-root #{str-slice($newSelector, 1, $minus)
								+ "\:"
								+ $name
								+ $end} {
							@content;
						}
					}
				}
			}
		}
	}
}

// device type extend
@mixin extend-device-interactions($touch: false) {
	@content;
	@if variables.$toggle__responsiveClasses {
		@each $selector in & {
			// desktop only
			@media (hover: hover) {
				@at-root .hover\:#{system.str-replace(#{$selector},".")} {
					@content;
				}
			}
			@if $touch {
				// mobile only
				@media (hover: none) {
					@at-root .touch\:#{system.str-replace(#{$selector},".")} {
						@content;
					}
				}
			}
		}
	}
}

// Create modifiers based on map
@mixin extend-map-modifiers(
	$map,
	$selector,
	$default: false,
	$defaultCondition: null
) {
	@each $name, $value in $map {
		$resolveSelector: meta.call($selector, $name);
		@if $default and $name==$default {
			// first to be overriden, default
			&#{$defaultCondition} {
				@content ($name, $value, true);
			}
		}
		&#{$resolveSelector} {
			@content ($name, $value, false);
		}
	}
}

// flexbox en una sola linea
// ej: row, nowrap, space-around, strecth
@mixin flex-box($t, $m, $j, $a, $d: flex) {
	display: $d;
	flex-flow: $t $m;
	justify-content: $j;
	align-items: $a;
}

// Mixin printing a linear-gradient
// as well as a plain color fallback
// and the `-webkit-` prefixed declaration
// @access public
// @param {String | List | Angle} $direction - Linear gradient direction
// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
	@if system.is-direction($direction) == false {
		$color-stops: ($direction, $color-stops);
		$direction: 180deg;
	}

	// background-color: nth(nth($color-stops, 1), 1);
	background-image: -webkit-linear-gradient(
		system.legacy-direction($direction),
		$color-stops
	);
	background-image: linear-gradient($direction, $color-stops);
}
