// grid Gap
// both dimension
//
// @group GlobalModifiers
// gap using margin
// both axis
// this class applies to any container, not just flex containers, so it can't be polyfilled
//
// @group GlobalModifiers
.xm__gap,
.xm__gaping {
	@include extend-viewports-classes {
		--g: 1rem;
	}
}
.xm__gapingX {
	// X dimension
	@include extend-viewports-classes {
		> * {
			--gx: 1rem;
		}
	}
}
.xm__gapingY {
	// Y dimension
	@include extend-viewports-classes {
		> * {
			--gy: 1rem;
		}
	}
}

@for $i from 1 through 10 {
	// grid Gap
	.xm__gap-#{$i*5},
	.xm__gaping-#{$i*5} {
		@include extend-viewports-classes {
			--g: #{$i/3}rem;
		}
	}
	.xm__gapingX-#{$i*5} {
		@include extend-viewports-classes {
			> * {
				--gx: #{$i/3}rem;
			}
		}
	}
	.xm__gapingY-#{$i*5} {
		@include extend-viewports-classes {
			> * {
				--gy: #{$i/3}rem;
			}
		}
	}
}

// grid/column gap default
[class*="__gap"]:not([class*="__gapi"]) {
	gap: var(--g); // omit fallback
}

// item spacing defaults
[class*="__gapi"]:not([class*="ngX"]):not([class*="ngY"]):not([class*="__gaping-no"]) {
	// this is a very special class to omit this specific fix
	&:not(.unfix__gaping) {
		--gc: calc(-1 * var(--g, 1rem)); // calculated gap
		margin: -0.1px var(--gc) var(--gc) -0.1px;
		box-sizing: border-box;
		&:last-child > :first-child:last-child {
			// only child, text nodes can break this
			margin: 0;
		}
	}
	> :not(br):not(.xm__m):not(.xm__margin):not([class*="__mX"]):not([class*="__mY"]) {
		&:not([class*="__mT"]):not([class*="__mL"]):not([class*="__mB"]):not([class*="__mR"]) {
			&[class*="__txtWr"]:not([class*="__flx"]),
			&:not([class*="-wrap"]):not([class*="-reverse"]) {
				// Wrap, omit fallback
				margin-bottom: var(--g);
				margin-right: var(--g);
				&:not([class*="__gapi"]) > :not([class*="__gapi"]) {
					--g: initial;
				}
			}
			// override gapinp fix on childs (affects wrap)
			--gc: 0 var(--g) var(--g) 0;
		}
	}
}

// X axis
// because of the fix is necesary to transfer the margin to the sibling element
[class*="ngX"]:not([class*="ngX-no"]) {
	> :not(br):not(:last-child):not([class*="__mR"]):not(.unfix__gaping) {
		// Right
		&:not(.xm__gaping):not([class*="__gaping:"]):not([class*="__gaping-"]) {
			margin-right: var(--gx); // omit fallback
			&[class*="__flx"][class*="-wrap"],
			&[class*="__flx"][class*="-reverse"],
			&[class*="__gapi"]:not([class*="ngX"]):not([class*="ngY"]):not([class*="__gaping-no"]) {
				--gx: calc(-1 * (var(--g, 1rem) - var(--gx, 1rem)));
			}
		}
	}
}
// Y axis
// because of the fix is necesary to transfer the margin to the sibling element
[class*="ngY"]:not([class*="ngY-no"]) {
	> :not(br):not(:last-child):not([class*="__mB"]):not(.unfix__gaping) {
		// Bottom
		&:not(.xm__gaping):not([class*="__gaping:"]):not([class*="__gaping-"]) {
			margin-bottom: var(--gy); // omit fallback
			&[class*="__flx"][class*="-wrap"],
			&[class*="__flx"][class*="-reverse"],
			&[class*="__gapi"]:not([class*="ngX"]):not([class*="ngY"]):not([class*="__gaping-no"]) {
				--gy: calc(-1 * (var(--g, 1rem) - var(--gy, 1rem)));
			}
		}
	}
}
