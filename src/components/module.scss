// There are some components that share common styles

// avatar & avatarAureo shared styles
//
// @group SharedStyles
[class*="avatar"] {
	display: block;
	overflow: hidden;
	flex: 0 0 auto;
	transition: all 0.1s ease-out;
	background-color: color(light);

	// avatar size
	//
	// @group Modifiers
	&,
	&.--size {
		border-radius: 1rem;
		&.--bdr,
		&.--border {
			border-width: 2px;
		}
	}
	&.--size-lg {
		border-radius: 1.667rem;
		&.--bdr,
		&.--border {
			border-width: 4px;
		}
	}
	&.--size-md {
		border-radius: 1.333rem;
		&.--bdr,
		&.--border {
			border-width: 3px;
		}
	}

	// avatar border
	//
	// @group Modifiers
	&.--bdr,
	&.--border {
		border-style: solid;
		box-sizing: border-box;
		&:not([class*="-bdrCo"]) {
			// Color
			border-color: color(light);
		}
	}

	img {
		object-fit: cover;
		object-position: 50% 50%;
	}
}
a[class*="avatar"] {
	&:hover,
	&.is--active,
	&.is--routeExact {
		// box-shadow: 1px 1px 3px color(dark, 0.2);
		img {
			opacity: 0.7;
		}
	}
	// avatar border
	//
	// @group Modifiers
	&.--bdr,
	&.--border {
		&:not(:hover),
		&:not(.is--active),
		&:not(.is--routeExact) {
			border-color: transparent;
		}
	}
}

// icon & svgIcon
//
// @group SharedStyles
.svg,
i.icon {
	// --sz could be inherited, we don't want that
	width: auto;
	height: 1em;
	font-size: 1rem;
	&:not(.is--logo):not(.--width-auto) {
		width: 1em;
	}

	// icon margin
	//
	// @group Modifiers
	&.--m,
	&.--margin {
		&:not(:first-child) {
			margin-left: 0.4em;
		}
		&:not(:last-child) {
			margin-right: 0.4em;
		}
	}

	// icon size
	//
	// @group Modifiers
	@for $i from 2 through 10 {
		&.--size-#{$i*5} {
			font-size: #{$i/3}rem;
		}
	}
}

// button defaults & round modifier
//
// @group SharedStyles
.bttn,
.bttnToggle {
	// this is the default value
	// Size
	padding: 0 0.8rem;
}
:not([class*="toggle--"]) > :not([class*="toggle--"]) {
	&.bttn,
	&.bttnToggle {
		// round button
		//
		// @group Modifiers
		&.--round {
			@include extend-viewports-classes(true, $viewports) {
				padding: 0; // button padding
				width: 2.4rem;
				i.icon,
				.svg {
					margin: 0 !important;
					+ span {
						display: none;
					}
				}
			}
		}
	}
}

// content alignment
//
// @group SharedStyles,
.link,
[class*="bttn"] {
	flex: 0 0 auto;
	@include flexbox(row, nowrap, center, center, inline-flex);
}

// icon behavior
//
// @group SharedStyles
.bttn,
.bttnToggle,
.link {
	> * + * {
		margin-left: 0.4em;
	}
}

// is alert
//
// @group SharedStyles
.link,
.bttnToggle {
	&.is--alert:after {
		content: "";
		display: block;
		width: 1rem;
		height: 1rem;
		position: absolute;
		right: -0.4rem;
		bottom: -0.4rem;
		border-width: 4px;
		border-style: solid;
		border-radius: 50%;
		box-sizing: border-box;
		border-color: var(--bc, transparent);
	}
}

// buttons & select themes
// Invalid state does not make sense on selects
//
// @group SharedStyles
[class*="bttn"]:not(.bttnToggle),
select.iSelect {
	// first value is the bgColor
	// second value is the textColor
	//
	// @group Unions
	&:not(.is--invalid) {
		&.--tm-light {
			&-secondary {
				--cl: #{color(secondary)};
				&:not(.is--route):not(.is--active) {
					&:hover,
					&:focus {
						--cl: #{color(secondary, 0.7)};
						--bc: #{color(secondary, 0.3)};
					}
				}
			}
			&-dark7 {
				--cl: #{color(dark, 0.7)};
				&:not(.is--route):not(.is--active) {
					&:hover,
					&:focus {
						--cl: #{color(dark, 0.3)};
						--bc: var(--cl);
					}
				}
			}
			&-primaryAlt {
				--cl: #{color(primaryAlt)};
				&:not(.is--route):not(.is--active) {
					&:hover,
					&:focus {
						--cl: #{color(primaryAlt, 0.7)};
						--bc: #{color(primaryAlt, 0.3)};
					}
				}
			}
			&-danger {
				--cl: #{color(danger)};
				&:not(.is--route):not(.is--active) {
					&:hover,
					&:focus {
						--cl: #{color(danger, 0.7)};
						--bc: #{color(danger, 0.3)};
					}
				}
			}
			&-success {
				--cl: #{color(success)};
				&:not(.is--route):not(.is--active) {
					&:hover,
					&:focus {
						--cl: #{color(success, 0.7)};
						--bc: #{color(success, 0.3)};
					}
				}
			}
			&-primary {
				--cl: #{color(primary)};
				--bg: #{color(light)};
				&:not(.is--route):not(.is--active) {
					&:hover,
					&:focus {
						--cl: #{color(primary, 0.7)};
						--bc: #{color(primary, 0.3)};
					}
				}
				&:not(.is--active):not(.is--route) {
					text-shadow: 0 0 1px color(dark, 0.2);
				}
			}
			&-secondary,
			&-dark,
			&-primaryAlt,
			&-danger,
			&-success {
				--bg: #{color(light)};
				&.is--active,
				&.is--route:not(.is--routeExact) {
					&:hover,
					&:focus {
						--cl: #{color(light, 0.7)};
					}
				}
				&:disabled,
				&[disabled] {
					--cl: #{color(light, 0.3)};
				}
			}
		}
		&.--tm-primary-light {
			--cl: #{color(light)};
			--bg: #{color(primary)};
			&:not(.is--route):not(.is--active) {
				&:hover,
				&:focus {
					--cl: #{color(light, 0.7)};
					--bc: #{color(light, 0.3)};
				}
			}
			&.is--active,
			&.is--route:not(.is--routeExact) {
				&:hover,
				&:focus {
					--cl: #{color(primary, 0.7)};
				}
			}
			&:disabled,
			&[disabled] {
				--cl: #{color(primary, 0.3)};
			}
		}
		&.--tm-primaryAlt-primary {
			--cl: #{color(primary)};
			--bg: #{color(primaryAlt)};
			&:not(.is--route):not(.is--active) {
				&:hover,
				&:focus {
					--cl: #{color(primary, 0.7)};
					--bc: #{color(primary, 0.3)};
				}
			}
			&.is--active,
			&.is--route:not(.is--routeExact) {
				&:hover,
				&:focus {
					--cl: #{color(primaryAlt, 0.7)};
				}
			}
			&:disabled,
			&[disabled] {
				--cl: #{color(primaryAlt, 0.3)};
			}
		}
		&.--tm-success-light {
			--cl: #{color(light)};
			--bg: #{color(success)};
			&:not(.is--route):not(.is--active) {
				&:hover,
				&:focus {
					--cl: #{color(light, 0.7)};
					--bc: #{color(light, 0.3)};
				}
			}
			&.is--active,
			&.is--route:not(.is--routeExact) {
				&:hover,
				&:focus {
					--cl: #{color(success, 0.7)};
				}
			}
			&:disabled,
			&[disabled] {
				--cl: #{color(success, 0.3)};
			}
		}
		// default theme
		&:not([class*="-tm"]),
		&.--tm-secondary-light {
			--cl: #{color(light)};
			--bg: #{color(secondary)};
			&:not(.is--route):not(.is--active) {
				&:hover,
				&:focus {
					--cl: #{color(light, 0.7)};
					--bc: #{color(light, 0.3)};
				}
			}
			&.is--active,
			&.is--route:not(.is--routeExact) {
				&:hover,
				&:focus {
					--cl: #{color(secondary, 0.7)};
				}
			}
			&.is--route {
				--cl: #{color(secondary)};
			}
			&.is--routeExact {
				--cl: #{color(dark, 0.7)};
			}
			&:disabled,
			&[disabled] {
				--cl: #{color(secondary, 0.3)};
			}
		}
	}
	&.is--invalid,
	&.--tm-danger-light {
		--cl: #{color(light)};
		--bg: #{color(danger)};
		&:not(.is--route):not(.is--active) {
			&:hover,
			&:focus {
				--cl: #{color(light, 0.7)};
				--bc: #{color(light, 0.3)};
			}
		}
		&.is--active,
		&.is--route:not(.is--routeExact) {
			&:hover,
			&:focus {
				--cl: #{color(danger, 0.7)};
			}
		}
		&:disabled,
		&[disabled] {
			--cl: #{color(danger, 0.3)};
		}
	}

	// OVERRIDE: dejar en el final
	&.is--active,
	&.is--route,
	&.is--routeExact {
		--cl: var(--bg);
		--bc: var(--cl);
	}
	&.is--active,
	&.is--route:not(.is--routeExact) {
		&:hover,
		&:focus {
			--bc: var(--cl);
		}
	}
	&:disabled,
	&[disabled] {
		--bc: var(--cl);
	}
	&.is--routeExact,
	&.is--route,
	&.is--active,
	&:disabled,
	&[disabled] {
		background-color: var(--bg-a, transparent);
	}
}

// default size
// Size
// this is the default value
//
// @group SharedStyles
.bttn,
.bttnToggle,
.iTxt:not(textarea),
select.iSelect {
	height: 2.4rem;
}
.bttn,
.bttnToggle,
.iTxt,
select.iSelect {
	border-radius: 1rem;
	border-width: 2px;
}

// capitalize
//
// @group SharedStyles
[class*="bttn"]:not(.bttnY),
.link,
select.iSelect {
	&:not([class*="-txtTransform"]) {
		&,
		> :not(.icon) {
			::first-letter {
				text-transform: capitalize;
			}
		}
	}
}

// disabled behavior
//
// @group SharedStyles
[class*="bttn"]:not(.bttnY),
.iTxt,
.link,
select.iSelect {
	&:disabled,
	&[disabled] {
		opacity: 0.3;
		pointer-events: none;
	}
}

// basic styling
//
// @group SharedStyles
[class*="bttn"],
.iTxt,
.link,
select.iSelect {
	// should inherit?
	color: var(--cl, transparent);
	background-color: var(--bg, transparent);
	border-color: var(--bc, transparent); // by default
	border-style: solid;
	text-shadow: none;
	box-sizing: border-box;
	font-size: 1em;
}

// LOOPS
@each $name, $size in $fontSizes {
	// button & buttonToggle shared styles
	//
	// @group SharedStyles
	.bttn,
	.bttnToggle {
		&.--size-#{$name} {
			// --p could be inherited, we don't want that
			padding: 0 #{$size * 0.8}; // button padding
		}
	}

	// text, select, button & buttonToggle shared styles
	//
	// @group SharedStyles
	.bttn,
	.bttnToggle,
	.iTxt:not(textarea),
	select.iSelect {
		&.--size-#{$name} {
			height: #{$size * 2.6}; // button size: height/width
		}
	}
	.bttn,
	.bttnToggle,
	.iTxt,
	select.iSelect {
		&.--size-#{$name} {
			border-radius: #{$size}; // button border radius
			border-width: calc(2px + #{$size/18}); // button border width
			&.--round {
				width: #{$size * 2.6};
			}
		}
	}
}

// tag associated
@import "hr";
@import "icon";
@import "inputText";
@import "inputToggle";
@import "inputSelect";
@import "navList";
@import "table";

// non tag associated
@import "text";
@import "emoji";
@import "svgIcon";
@import "avatar";
@import "avatarAureo";
@import "back";
@import "box";
@import "link";
@import "button";
@import "buttonLink";
@import "buttonToggle";
@import "holder";
@import "scroll";
@import "view";
@import "navigationX";
@import "navigationY";
