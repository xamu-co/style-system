@use "sass:meta";

// Toggle button
// this element is expected to be an <button>, <a> or <label> element
// aditionally you have to provide a fas(solid) far(regular) icons
//
// @group Components
.bttnToggle {
	--cl-a: var(--cl);
	&.is--alert:after {
		background-color: var(--bg, transparent);
	}

	&.is--alert,
	&.is--active,
	&.is--routeExact:not(.no--route):not(.no--routeExact) {
		//hide regular
		&,
		.bttnToggle-icon {
			i.icon,
			.svg {
				&:first-of-type {
					display: none;
					&:first-child + * {
						margin-left: 0;
					}
				}
			}
		}
	}
	&:not(.is--alert):not(.is--active) {
		&:not(.is--routeExact),
		&.is--routeExact.no--route,
		&.is--routeExact.no--routeExact {
			//hide solid
			&,
			.bttnToggle-icon {
				i.icon,
				.svg {
					&:last-of-type {
						display: none;
					}
				}
			}
		}
	}

	// button theme
	// first value is the bgColor
	// second value is the textColor
	//
	// @group Modifiers
	@function buttonToggleThemeSelector($name) {
		@return ".--tm-#{$name}";
	}
	@include extend-map-modifiers(
			$extendedThemeColors,
			meta.get-function("buttonToggleThemeSelector"),
			secondary,
			':not([class*="-tm-"])'
		)
		using($name, $value) {
		--cl: #{color($name)};
		--bg: #{color($name, 0.1)};
		&:hover {
			--bc: #{color($name, 0.3)};
		}
		&.is--alert,
		&.is--active {
			--bg: #{color($name, 0.5)};
		}
		&.is--alert:after {
			--bc: #{color($name)};
			--bg: #{color(light)};
		}
		&.is--routeExact:not(.no--route):not(.no--routeExact) {
			--cl: #{color(light)};
			--bg: #{color($name, 0.5)};
			--bc: #{color(light, 0.3)};
		}
	}

	// Alternative color
	&.--tm-lightComplement {
		--cl: #{color(light)};
		--bg: #{color(primaryComplement, 0.1)};
		&:hover {
			--bc: #{color(primaryComplement, 0.3)};
		}
		&.is--alert:after {
			--bg: #{color(light)};
			--bc: #{color(dark, 0.3)};
		}
		&.is--alert,
		&.is--active {
			--bg: #{color(primaryComplement, 0.5)};
		}
		&.is--routeExact:not(.no--route):not(.no--routeExact) {
			--cl: #{color(light)};
			--bg: #{color(primaryComplement, 0.5)};
			--bc: #{color(light, 0.3)};
		}
	}

	> span {
		display: block;
		line-height: 1em;
	}
}
