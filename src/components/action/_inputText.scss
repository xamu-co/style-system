@use "module";
@use "sass:meta";

@function iTxtThemeSelector($name) {
	@return ".#{module.$prefix__default}--tm-#{$name}";
}

// Envuelve cada vista
// this element is expected to be an <input> or <textarea> tag but the text type
//
// @group Components
@mixin input-text {
	.#{module.$component__inputText} {
		width: 100%;
		display: block;
		padding: 0 0.8rem;
		@include module.action-styles;
		@include module.action-border-styles;
		@include module.action-disabled-styles;
		@include module.flex-box(column, nowrap, center, center);

		@at-root textarea#{&} {
			min-height: 6rem;
			padding-top: 0.5rem;
			padding-bottom: 0.5rem;
		}

		&:not(textarea) {
			@include module.action-size-styles;

			i.#{module.$component__icon},
			.#{module.$component__svg} {
				position: absolute;
				top: 50%;
				left: 0.8rem;
				z-index: 1;
				transform: translateY(-50%);
			}
			input {
				background-color: transparent;
				width: 100%;
				height: 100%;
				padding-left: 1.6rem;
				color: inherit;
				font-weight: inherit;
				box-sizing: border-box;
				&[placeholder],
				&:placeholder-shown {
					text-overflow: ellipsis;
				}
			}
		}

		&:not([class*="--txtAlign"]) {
			text-align: left;
		}

		// theme
		//
		// @group Modifiers
		@include module.extend-color-modifiers(
				meta.get-function("iTxtThemeSelector"),
				module.$themeColors
			)
			using($name, $value, $isDefault) {
			--bg: #{module.color($name, 0.1)};
			--bc: #{module.color($name, 0.05)};
			--cl: #{module.color(light)};
			--cl-a: #{module.color(light, 0.5)};

			// invalid
			&.#{module.$status__isInvalid} {
				--bg: #{module.color(danger, 0.1)};
				--bc: #{module.color(danger, 0.05)};
				--cl: #{module.color(danger)};
				--cl-a: #{module.color(danger, 0.3)};
			}
		}

		// Aditional colors
		&.#{module.$prefix__default}--tm-light {
			--bg: #{module.color(light, 0.3)};
			--bc: #{module.color(light, 0.7)};
			--cl: #{module.color(light)};
			--cl-a: #{module.color(light, 0.7)};
			text-shadow: 1px 1px 1px module.color(dark, 0.3);
			&:hover:not(:focus):not(:focus-within) {
				--bc: var(--cl);
			}
			&:focus,
			&:focus-within {
				--bg: #{module.color(primary, 0.3)};
				--bc: #{module.color(primary)};
			}
		}
		&.#{module.$prefix__default}--tm-lighter {
			--bg: #{module.color(light)};
			--bc: #{transparent};
			--cl: #{module.color(primary)};
			--cl-a: #{module.color(primary, 0.5)};
		}
		&.#{module.$prefix__default}--tm-lightComplement {
			--bg: #{module.color(light)};
			--bc: #{transparent};
			--cl: #{module.color(primaryComplement)};
			--cl-a: #{module.color(primaryComplement, 0.3)};
		}
		&.#{module.$prefix__default}--tm-light,
		&.#{module.$prefix__default}--tm-lighter,
		&.#{module.$prefix__default}--tm-lightComplement {
			// invalid
			&.#{module.$status__isInvalid} {
				--bg: #{module.color(danger, 0.1)};
				--bc: #{module.color(danger, 0.05)};
				--cl: #{module.color(danger)};
				--cl-a: #{module.color(danger, 0.3)};
			}

			// showcase a shadow
			//
			// @group ConditionalModifiers
			&.#{module.$prefix__default}--shadow {
				box-shadow: 1px 1px 3px module.color(dark, 0.3);
			}
		}

		// OVERRIDES:
		&:hover:not(:focus):not(:focus-within) {
			--bc: var(--cl-a) !important;
		}
		&:focus,
		&:focus-within {
			--bc: var(--cl) !important;
		}

		&::placeholder,
		input::placeholder,
		input:placeholder-shown ~ i.#{module.$component__icon},
		input:placeholder-shown ~ .#{module.$component__svg} path {
			color: var(--cl-a);
			fill: var(--cl-a);
		}
	}
}
