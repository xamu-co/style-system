/** @format */
/*
	A personal collection of usefull mixins
	I created the flexbox one and consider it the most useful
	Some of them are not that necesary cuz the were mean for prefixing, but autoprefixer solves that already
*/

// viewport extend
@mixin extend-viewports() {
	@content;
	@if $responsive {
		@each $name, $viewport in $viewports {
			@media (max-width: $viewport) {
				&\:#{$name} {
					@content;
				}
			}
			@media (min-width: $viewport + 1) {
				&\:#{$name}-inv {
					@content;
				}
			}
		}
	}
}

// este mixin es solo valido para display:flex
@mixin d_flex() {
	display: -webkit-box;
	display: -ms-flexbox;
	display: flex;
}
@mixin flex-flow($type, $mode) {
	-webkit-box-orient: if($type == row, horizontal, vertical);
	-webkit-box-direction: if(str-index($type, reverse), reverse, normal);
	-ms-flex-flow: $type $mode;
	flex-flow: $type $mode;
}
@mixin justify-content($v) {
	$_v: str-replace($v, "flex-", "");
	$n_v: map-get(
		(
			space-between: justify,
			space-around: distribute,
			center: center,
			start: start,
			end: end,
		),
		$_v
	);
	@if $n_v != distribute {
		-webkit-box-pack: $n_v;
	}
	-ms-flex-pack: $n_v;
	justify-content: $v;
}
@mixin align-items($v) {
	$_v: str-replace($v, "flex-", "");
	-webkit-box-align: $_v;
	-ms-flex-align: $_v;
	align-items: $v;
}
// flexbox en una sola linea
// ej: row, nowrap, space-around, strecth
@mixin flexbox($t, $m, $j, $a, $d: flex) {
	@if $d != flex {
		display: $d;
	} @else {
		@include d_flex();
	}
	@include flex-flow($t, $m);
	@include justify-content($j);
	@include align-items($a);
}

@mixin flex($v) {
	-webkit-box-flex: nth($v, 1); //toma el primer valor numerico de $v
	-ms-flex: $v;
	flex: $v;
}

/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
	@if is-direction($direction) == false {
		$color-stops: ($direction, $color-stops);
		$direction: 180deg;
	}

	// background-color: nth(nth($color-stops, 1), 1);
	background-image: -webkit-linear-gradient(
		legacy-direction($direction),
		$color-stops
	);
	background-image: linear-gradient($direction, $color-stops);
}

/*
	Mixins
	Author - Andy Crone | @andycrone_
	+ Popular mixins including vendor prefixes for cross-browser support
*/

// === Standard layout & styling

@mixin box-sizing($v) {
	-webkit-box-sizing: $v;
	-moz-box-sizing: $v;
	box-sizing: $v;
}

// === Animations

@mixin transition($v...) {
	-webkit-transition: $v;
	transition: $v;
}
@mixin transition-delay($v) {
	-webkit-transition-delay: $v;
	transition-delay: $v;
}
@mixin transform($v) {
	-o-transform: $v;
	-ms-transform: $v;
	-webkit-transform: $v;
	transform: $v;
}
@mixin transform-origin($v) {
	-o-transform-origin: $v;
	-ms-transform-origin: $v;
	-webkit-transform-origin: $v;
	transform-origin: $v;
}
@mixin animation($v...) {
	-o-animation: $v;
	-moz-animation: $v;
	-webkit-animation: $v;
	animation: $v;
}
@mixin animation-delay($v) {
	-o-animation-delay: $v;
	-moz-animation-delay: $v;
	-webkit-animation-delay: $v;
	animation-delay: $v;
}

// === Filters

@mixin filter($v) {
	-o-filter: $v;
	-ms-filter: $v;
	-webkit-filter: $v;
	-moz-filter: $v;
	filter: $v;
}

// === Browser mods

@mixin appearance($v) {
	-moz-appearance: $v;
	-webkit-appearance: $v;
	appearance: $v;
}
@mixin user-select($v) {
	-webkit-touch-callout: $v;
	-webkit-user-select: $v;
	-khtml-user-select: $v;
	-moz-user-select: $v;
	-ms-user-select: $v;
	user-select: $v;
}

//https://gist.github.com/nickspiel/10331551
@mixin blur($amount, $unit: px) {
	filter: url("data:image/svg+xml;utf8,<svg%20xmlns='http://www.w3.org/2000/svg'><filter%20id='blur'><feGaussianBlur%20stdDeviation='#{$amount}'/></filter></svg>#blur");
	-webkit-filter: blur($amount + $unit);
	filter: blur($amount + $unit);
}
